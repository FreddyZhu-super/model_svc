// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: algorithm.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_algorithm_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_algorithm_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_algorithm_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_algorithm_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_algorithm_2eproto;
namespace algorithm_service {
class AlgorithmReply;
struct AlgorithmReplyDefaultTypeInternal;
extern AlgorithmReplyDefaultTypeInternal _AlgorithmReply_default_instance_;
class AlgorithmRequest;
struct AlgorithmRequestDefaultTypeInternal;
extern AlgorithmRequestDefaultTypeInternal _AlgorithmRequest_default_instance_;
class InferenceReply;
struct InferenceReplyDefaultTypeInternal;
extern InferenceReplyDefaultTypeInternal _InferenceReply_default_instance_;
class InferenceRequest;
struct InferenceRequestDefaultTypeInternal;
extern InferenceRequestDefaultTypeInternal _InferenceRequest_default_instance_;
}  // namespace algorithm_service
PROTOBUF_NAMESPACE_OPEN
template<> ::algorithm_service::AlgorithmReply* Arena::CreateMaybeMessage<::algorithm_service::AlgorithmReply>(Arena*);
template<> ::algorithm_service::AlgorithmRequest* Arena::CreateMaybeMessage<::algorithm_service::AlgorithmRequest>(Arena*);
template<> ::algorithm_service::InferenceReply* Arena::CreateMaybeMessage<::algorithm_service::InferenceReply>(Arena*);
template<> ::algorithm_service::InferenceRequest* Arena::CreateMaybeMessage<::algorithm_service::InferenceRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace algorithm_service {

// ===================================================================

class InferenceRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:algorithm_service.InferenceRequest) */ {
 public:
  inline InferenceRequest() : InferenceRequest(nullptr) {}
  ~InferenceRequest() override;
  explicit constexpr InferenceRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InferenceRequest(const InferenceRequest& from);
  InferenceRequest(InferenceRequest&& from) noexcept
    : InferenceRequest() {
    *this = ::std::move(from);
  }

  inline InferenceRequest& operator=(const InferenceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline InferenceRequest& operator=(InferenceRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InferenceRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const InferenceRequest* internal_default_instance() {
    return reinterpret_cast<const InferenceRequest*>(
               &_InferenceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(InferenceRequest& a, InferenceRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(InferenceRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InferenceRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InferenceRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InferenceRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InferenceRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const InferenceRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InferenceRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "algorithm_service.InferenceRequest";
  }
  protected:
  explicit InferenceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModelIdFieldNumber = 1,
    kDataFieldNumber = 4,
    kThresholdFieldNumber = 2,
    kNmsThresholdFieldNumber = 3,
  };
  // string model_id = 1;
  void clear_model_id();
  const std::string& model_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_model_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_model_id();
  PROTOBUF_NODISCARD std::string* release_model_id();
  void set_allocated_model_id(std::string* model_id);
  private:
  const std::string& _internal_model_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_model_id(const std::string& value);
  std::string* _internal_mutable_model_id();
  public:

  // bytes data = 4;
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // float threshold = 2;
  void clear_threshold();
  float threshold() const;
  void set_threshold(float value);
  private:
  float _internal_threshold() const;
  void _internal_set_threshold(float value);
  public:

  // float nms_threshold = 3;
  void clear_nms_threshold();
  float nms_threshold() const;
  void set_nms_threshold(float value);
  private:
  float _internal_nms_threshold() const;
  void _internal_set_nms_threshold(float value);
  public:

  // @@protoc_insertion_point(class_scope:algorithm_service.InferenceRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  float threshold_;
  float nms_threshold_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_algorithm_2eproto;
};
// -------------------------------------------------------------------

class AlgorithmRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:algorithm_service.AlgorithmRequest) */ {
 public:
  inline AlgorithmRequest() : AlgorithmRequest(nullptr) {}
  ~AlgorithmRequest() override;
  explicit constexpr AlgorithmRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AlgorithmRequest(const AlgorithmRequest& from);
  AlgorithmRequest(AlgorithmRequest&& from) noexcept
    : AlgorithmRequest() {
    *this = ::std::move(from);
  }

  inline AlgorithmRequest& operator=(const AlgorithmRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AlgorithmRequest& operator=(AlgorithmRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AlgorithmRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const AlgorithmRequest* internal_default_instance() {
    return reinterpret_cast<const AlgorithmRequest*>(
               &_AlgorithmRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AlgorithmRequest& a, AlgorithmRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AlgorithmRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AlgorithmRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AlgorithmRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AlgorithmRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AlgorithmRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AlgorithmRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AlgorithmRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "algorithm_service.AlgorithmRequest";
  }
  protected:
  explicit AlgorithmRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModelIdFieldNumber = 1,
  };
  // string model_id = 1;
  void clear_model_id();
  const std::string& model_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_model_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_model_id();
  PROTOBUF_NODISCARD std::string* release_model_id();
  void set_allocated_model_id(std::string* model_id);
  private:
  const std::string& _internal_model_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_model_id(const std::string& value);
  std::string* _internal_mutable_model_id();
  public:

  // @@protoc_insertion_point(class_scope:algorithm_service.AlgorithmRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_algorithm_2eproto;
};
// -------------------------------------------------------------------

class AlgorithmReply final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:algorithm_service.AlgorithmReply) */ {
 public:
  inline AlgorithmReply() : AlgorithmReply(nullptr) {}
  ~AlgorithmReply() override;
  explicit constexpr AlgorithmReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AlgorithmReply(const AlgorithmReply& from);
  AlgorithmReply(AlgorithmReply&& from) noexcept
    : AlgorithmReply() {
    *this = ::std::move(from);
  }

  inline AlgorithmReply& operator=(const AlgorithmReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline AlgorithmReply& operator=(AlgorithmReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AlgorithmReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const AlgorithmReply* internal_default_instance() {
    return reinterpret_cast<const AlgorithmReply*>(
               &_AlgorithmReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(AlgorithmReply& a, AlgorithmReply& b) {
    a.Swap(&b);
  }
  inline void Swap(AlgorithmReply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AlgorithmReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AlgorithmReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AlgorithmReply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AlgorithmReply& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AlgorithmReply& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AlgorithmReply* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "algorithm_service.AlgorithmReply";
  }
  protected:
  explicit AlgorithmReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrMessageFieldNumber = 2,
    kRetCodeFieldNumber = 1,
  };
  // string err_message = 2;
  void clear_err_message();
  const std::string& err_message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_err_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_err_message();
  PROTOBUF_NODISCARD std::string* release_err_message();
  void set_allocated_err_message(std::string* err_message);
  private:
  const std::string& _internal_err_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_err_message(const std::string& value);
  std::string* _internal_mutable_err_message();
  public:

  // int32 ret_code = 1;
  void clear_ret_code();
  int32_t ret_code() const;
  void set_ret_code(int32_t value);
  private:
  int32_t _internal_ret_code() const;
  void _internal_set_ret_code(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:algorithm_service.AlgorithmReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr err_message_;
  int32_t ret_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_algorithm_2eproto;
};
// -------------------------------------------------------------------

class InferenceReply final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:algorithm_service.InferenceReply) */ {
 public:
  inline InferenceReply() : InferenceReply(nullptr) {}
  ~InferenceReply() override;
  explicit constexpr InferenceReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InferenceReply(const InferenceReply& from);
  InferenceReply(InferenceReply&& from) noexcept
    : InferenceReply() {
    *this = ::std::move(from);
  }

  inline InferenceReply& operator=(const InferenceReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline InferenceReply& operator=(InferenceReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InferenceReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const InferenceReply* internal_default_instance() {
    return reinterpret_cast<const InferenceReply*>(
               &_InferenceReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(InferenceReply& a, InferenceReply& b) {
    a.Swap(&b);
  }
  inline void Swap(InferenceReply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InferenceReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InferenceReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InferenceReply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InferenceReply& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const InferenceReply& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InferenceReply* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "algorithm_service.InferenceReply";
  }
  protected:
  explicit InferenceReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjnameFieldNumber = 12,
    kDescFieldNumber = 13,
    kRetCodeFieldNumber = 14,
    kErrMessageFieldNumber = 15,
    kX0FieldNumber = 1,
    kY0FieldNumber = 2,
    kX1FieldNumber = 3,
    kY1FieldNumber = 4,
    kXFieldNumber = 5,
    kYFieldNumber = 6,
    kWFieldNumber = 7,
    kHFieldNumber = 8,
    kObjectnessFieldNumber = 9,
    kConfidenceFieldNumber = 10,
    kQualityFieldNumber = 11,
  };
  // string objname = 12;
  void clear_objname();
  const std::string& objname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_objname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_objname();
  PROTOBUF_NODISCARD std::string* release_objname();
  void set_allocated_objname(std::string* objname);
  private:
  const std::string& _internal_objname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_objname(const std::string& value);
  std::string* _internal_mutable_objname();
  public:

  // string desc = 13;
  void clear_desc();
  const std::string& desc() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_desc(ArgT0&& arg0, ArgT... args);
  std::string* mutable_desc();
  PROTOBUF_NODISCARD std::string* release_desc();
  void set_allocated_desc(std::string* desc);
  private:
  const std::string& _internal_desc() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_desc(const std::string& value);
  std::string* _internal_mutable_desc();
  public:

  // string ret_code = 14;
  void clear_ret_code();
  const std::string& ret_code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ret_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ret_code();
  PROTOBUF_NODISCARD std::string* release_ret_code();
  void set_allocated_ret_code(std::string* ret_code);
  private:
  const std::string& _internal_ret_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ret_code(const std::string& value);
  std::string* _internal_mutable_ret_code();
  public:

  // string err_message = 15;
  void clear_err_message();
  const std::string& err_message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_err_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_err_message();
  PROTOBUF_NODISCARD std::string* release_err_message();
  void set_allocated_err_message(std::string* err_message);
  private:
  const std::string& _internal_err_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_err_message(const std::string& value);
  std::string* _internal_mutable_err_message();
  public:

  // float x0 = 1;
  void clear_x0();
  float x0() const;
  void set_x0(float value);
  private:
  float _internal_x0() const;
  void _internal_set_x0(float value);
  public:

  // float y0 = 2;
  void clear_y0();
  float y0() const;
  void set_y0(float value);
  private:
  float _internal_y0() const;
  void _internal_set_y0(float value);
  public:

  // float x1 = 3;
  void clear_x1();
  float x1() const;
  void set_x1(float value);
  private:
  float _internal_x1() const;
  void _internal_set_x1(float value);
  public:

  // float y1 = 4;
  void clear_y1();
  float y1() const;
  void set_y1(float value);
  private:
  float _internal_y1() const;
  void _internal_set_y1(float value);
  public:

  // float x = 5;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 6;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float w = 7;
  void clear_w();
  float w() const;
  void set_w(float value);
  private:
  float _internal_w() const;
  void _internal_set_w(float value);
  public:

  // float h = 8;
  void clear_h();
  float h() const;
  void set_h(float value);
  private:
  float _internal_h() const;
  void _internal_set_h(float value);
  public:

  // float objectness = 9;
  void clear_objectness();
  float objectness() const;
  void set_objectness(float value);
  private:
  float _internal_objectness() const;
  void _internal_set_objectness(float value);
  public:

  // float confidence = 10;
  void clear_confidence();
  float confidence() const;
  void set_confidence(float value);
  private:
  float _internal_confidence() const;
  void _internal_set_confidence(float value);
  public:

  // float quality = 11;
  void clear_quality();
  float quality() const;
  void set_quality(float value);
  private:
  float _internal_quality() const;
  void _internal_set_quality(float value);
  public:

  // @@protoc_insertion_point(class_scope:algorithm_service.InferenceReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr objname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr desc_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ret_code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr err_message_;
  float x0_;
  float y0_;
  float x1_;
  float y1_;
  float x_;
  float y_;
  float w_;
  float h_;
  float objectness_;
  float confidence_;
  float quality_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_algorithm_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// InferenceRequest

// string model_id = 1;
inline void InferenceRequest::clear_model_id() {
  model_id_.ClearToEmpty();
}
inline const std::string& InferenceRequest::model_id() const {
  // @@protoc_insertion_point(field_get:algorithm_service.InferenceRequest.model_id)
  return _internal_model_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InferenceRequest::set_model_id(ArgT0&& arg0, ArgT... args) {
 
 model_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:algorithm_service.InferenceRequest.model_id)
}
inline std::string* InferenceRequest::mutable_model_id() {
  std::string* _s = _internal_mutable_model_id();
  // @@protoc_insertion_point(field_mutable:algorithm_service.InferenceRequest.model_id)
  return _s;
}
inline const std::string& InferenceRequest::_internal_model_id() const {
  return model_id_.Get();
}
inline void InferenceRequest::_internal_set_model_id(const std::string& value) {
  
  model_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* InferenceRequest::_internal_mutable_model_id() {
  
  return model_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* InferenceRequest::release_model_id() {
  // @@protoc_insertion_point(field_release:algorithm_service.InferenceRequest.model_id)
  return model_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void InferenceRequest::set_allocated_model_id(std::string* model_id) {
  if (model_id != nullptr) {
    
  } else {
    
  }
  model_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), model_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (model_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    model_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:algorithm_service.InferenceRequest.model_id)
}

// float threshold = 2;
inline void InferenceRequest::clear_threshold() {
  threshold_ = 0;
}
inline float InferenceRequest::_internal_threshold() const {
  return threshold_;
}
inline float InferenceRequest::threshold() const {
  // @@protoc_insertion_point(field_get:algorithm_service.InferenceRequest.threshold)
  return _internal_threshold();
}
inline void InferenceRequest::_internal_set_threshold(float value) {
  
  threshold_ = value;
}
inline void InferenceRequest::set_threshold(float value) {
  _internal_set_threshold(value);
  // @@protoc_insertion_point(field_set:algorithm_service.InferenceRequest.threshold)
}

// float nms_threshold = 3;
inline void InferenceRequest::clear_nms_threshold() {
  nms_threshold_ = 0;
}
inline float InferenceRequest::_internal_nms_threshold() const {
  return nms_threshold_;
}
inline float InferenceRequest::nms_threshold() const {
  // @@protoc_insertion_point(field_get:algorithm_service.InferenceRequest.nms_threshold)
  return _internal_nms_threshold();
}
inline void InferenceRequest::_internal_set_nms_threshold(float value) {
  
  nms_threshold_ = value;
}
inline void InferenceRequest::set_nms_threshold(float value) {
  _internal_set_nms_threshold(value);
  // @@protoc_insertion_point(field_set:algorithm_service.InferenceRequest.nms_threshold)
}

// bytes data = 4;
inline void InferenceRequest::clear_data() {
  data_.ClearToEmpty();
}
inline const std::string& InferenceRequest::data() const {
  // @@protoc_insertion_point(field_get:algorithm_service.InferenceRequest.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InferenceRequest::set_data(ArgT0&& arg0, ArgT... args) {
 
 data_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:algorithm_service.InferenceRequest.data)
}
inline std::string* InferenceRequest::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:algorithm_service.InferenceRequest.data)
  return _s;
}
inline const std::string& InferenceRequest::_internal_data() const {
  return data_.Get();
}
inline void InferenceRequest::_internal_set_data(const std::string& value) {
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* InferenceRequest::_internal_mutable_data() {
  
  return data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* InferenceRequest::release_data() {
  // @@protoc_insertion_point(field_release:algorithm_service.InferenceRequest.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void InferenceRequest::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (data_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:algorithm_service.InferenceRequest.data)
}

// -------------------------------------------------------------------

// AlgorithmRequest

// string model_id = 1;
inline void AlgorithmRequest::clear_model_id() {
  model_id_.ClearToEmpty();
}
inline const std::string& AlgorithmRequest::model_id() const {
  // @@protoc_insertion_point(field_get:algorithm_service.AlgorithmRequest.model_id)
  return _internal_model_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AlgorithmRequest::set_model_id(ArgT0&& arg0, ArgT... args) {
 
 model_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:algorithm_service.AlgorithmRequest.model_id)
}
inline std::string* AlgorithmRequest::mutable_model_id() {
  std::string* _s = _internal_mutable_model_id();
  // @@protoc_insertion_point(field_mutable:algorithm_service.AlgorithmRequest.model_id)
  return _s;
}
inline const std::string& AlgorithmRequest::_internal_model_id() const {
  return model_id_.Get();
}
inline void AlgorithmRequest::_internal_set_model_id(const std::string& value) {
  
  model_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AlgorithmRequest::_internal_mutable_model_id() {
  
  return model_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AlgorithmRequest::release_model_id() {
  // @@protoc_insertion_point(field_release:algorithm_service.AlgorithmRequest.model_id)
  return model_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AlgorithmRequest::set_allocated_model_id(std::string* model_id) {
  if (model_id != nullptr) {
    
  } else {
    
  }
  model_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), model_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (model_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    model_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:algorithm_service.AlgorithmRequest.model_id)
}

// -------------------------------------------------------------------

// AlgorithmReply

// int32 ret_code = 1;
inline void AlgorithmReply::clear_ret_code() {
  ret_code_ = 0;
}
inline int32_t AlgorithmReply::_internal_ret_code() const {
  return ret_code_;
}
inline int32_t AlgorithmReply::ret_code() const {
  // @@protoc_insertion_point(field_get:algorithm_service.AlgorithmReply.ret_code)
  return _internal_ret_code();
}
inline void AlgorithmReply::_internal_set_ret_code(int32_t value) {
  
  ret_code_ = value;
}
inline void AlgorithmReply::set_ret_code(int32_t value) {
  _internal_set_ret_code(value);
  // @@protoc_insertion_point(field_set:algorithm_service.AlgorithmReply.ret_code)
}

// string err_message = 2;
inline void AlgorithmReply::clear_err_message() {
  err_message_.ClearToEmpty();
}
inline const std::string& AlgorithmReply::err_message() const {
  // @@protoc_insertion_point(field_get:algorithm_service.AlgorithmReply.err_message)
  return _internal_err_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AlgorithmReply::set_err_message(ArgT0&& arg0, ArgT... args) {
 
 err_message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:algorithm_service.AlgorithmReply.err_message)
}
inline std::string* AlgorithmReply::mutable_err_message() {
  std::string* _s = _internal_mutable_err_message();
  // @@protoc_insertion_point(field_mutable:algorithm_service.AlgorithmReply.err_message)
  return _s;
}
inline const std::string& AlgorithmReply::_internal_err_message() const {
  return err_message_.Get();
}
inline void AlgorithmReply::_internal_set_err_message(const std::string& value) {
  
  err_message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AlgorithmReply::_internal_mutable_err_message() {
  
  return err_message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AlgorithmReply::release_err_message() {
  // @@protoc_insertion_point(field_release:algorithm_service.AlgorithmReply.err_message)
  return err_message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AlgorithmReply::set_allocated_err_message(std::string* err_message) {
  if (err_message != nullptr) {
    
  } else {
    
  }
  err_message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), err_message,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (err_message_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    err_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:algorithm_service.AlgorithmReply.err_message)
}

// -------------------------------------------------------------------

// InferenceReply

// float x0 = 1;
inline void InferenceReply::clear_x0() {
  x0_ = 0;
}
inline float InferenceReply::_internal_x0() const {
  return x0_;
}
inline float InferenceReply::x0() const {
  // @@protoc_insertion_point(field_get:algorithm_service.InferenceReply.x0)
  return _internal_x0();
}
inline void InferenceReply::_internal_set_x0(float value) {
  
  x0_ = value;
}
inline void InferenceReply::set_x0(float value) {
  _internal_set_x0(value);
  // @@protoc_insertion_point(field_set:algorithm_service.InferenceReply.x0)
}

// float y0 = 2;
inline void InferenceReply::clear_y0() {
  y0_ = 0;
}
inline float InferenceReply::_internal_y0() const {
  return y0_;
}
inline float InferenceReply::y0() const {
  // @@protoc_insertion_point(field_get:algorithm_service.InferenceReply.y0)
  return _internal_y0();
}
inline void InferenceReply::_internal_set_y0(float value) {
  
  y0_ = value;
}
inline void InferenceReply::set_y0(float value) {
  _internal_set_y0(value);
  // @@protoc_insertion_point(field_set:algorithm_service.InferenceReply.y0)
}

// float x1 = 3;
inline void InferenceReply::clear_x1() {
  x1_ = 0;
}
inline float InferenceReply::_internal_x1() const {
  return x1_;
}
inline float InferenceReply::x1() const {
  // @@protoc_insertion_point(field_get:algorithm_service.InferenceReply.x1)
  return _internal_x1();
}
inline void InferenceReply::_internal_set_x1(float value) {
  
  x1_ = value;
}
inline void InferenceReply::set_x1(float value) {
  _internal_set_x1(value);
  // @@protoc_insertion_point(field_set:algorithm_service.InferenceReply.x1)
}

// float y1 = 4;
inline void InferenceReply::clear_y1() {
  y1_ = 0;
}
inline float InferenceReply::_internal_y1() const {
  return y1_;
}
inline float InferenceReply::y1() const {
  // @@protoc_insertion_point(field_get:algorithm_service.InferenceReply.y1)
  return _internal_y1();
}
inline void InferenceReply::_internal_set_y1(float value) {
  
  y1_ = value;
}
inline void InferenceReply::set_y1(float value) {
  _internal_set_y1(value);
  // @@protoc_insertion_point(field_set:algorithm_service.InferenceReply.y1)
}

// float x = 5;
inline void InferenceReply::clear_x() {
  x_ = 0;
}
inline float InferenceReply::_internal_x() const {
  return x_;
}
inline float InferenceReply::x() const {
  // @@protoc_insertion_point(field_get:algorithm_service.InferenceReply.x)
  return _internal_x();
}
inline void InferenceReply::_internal_set_x(float value) {
  
  x_ = value;
}
inline void InferenceReply::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:algorithm_service.InferenceReply.x)
}

// float y = 6;
inline void InferenceReply::clear_y() {
  y_ = 0;
}
inline float InferenceReply::_internal_y() const {
  return y_;
}
inline float InferenceReply::y() const {
  // @@protoc_insertion_point(field_get:algorithm_service.InferenceReply.y)
  return _internal_y();
}
inline void InferenceReply::_internal_set_y(float value) {
  
  y_ = value;
}
inline void InferenceReply::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:algorithm_service.InferenceReply.y)
}

// float w = 7;
inline void InferenceReply::clear_w() {
  w_ = 0;
}
inline float InferenceReply::_internal_w() const {
  return w_;
}
inline float InferenceReply::w() const {
  // @@protoc_insertion_point(field_get:algorithm_service.InferenceReply.w)
  return _internal_w();
}
inline void InferenceReply::_internal_set_w(float value) {
  
  w_ = value;
}
inline void InferenceReply::set_w(float value) {
  _internal_set_w(value);
  // @@protoc_insertion_point(field_set:algorithm_service.InferenceReply.w)
}

// float h = 8;
inline void InferenceReply::clear_h() {
  h_ = 0;
}
inline float InferenceReply::_internal_h() const {
  return h_;
}
inline float InferenceReply::h() const {
  // @@protoc_insertion_point(field_get:algorithm_service.InferenceReply.h)
  return _internal_h();
}
inline void InferenceReply::_internal_set_h(float value) {
  
  h_ = value;
}
inline void InferenceReply::set_h(float value) {
  _internal_set_h(value);
  // @@protoc_insertion_point(field_set:algorithm_service.InferenceReply.h)
}

// float objectness = 9;
inline void InferenceReply::clear_objectness() {
  objectness_ = 0;
}
inline float InferenceReply::_internal_objectness() const {
  return objectness_;
}
inline float InferenceReply::objectness() const {
  // @@protoc_insertion_point(field_get:algorithm_service.InferenceReply.objectness)
  return _internal_objectness();
}
inline void InferenceReply::_internal_set_objectness(float value) {
  
  objectness_ = value;
}
inline void InferenceReply::set_objectness(float value) {
  _internal_set_objectness(value);
  // @@protoc_insertion_point(field_set:algorithm_service.InferenceReply.objectness)
}

// float confidence = 10;
inline void InferenceReply::clear_confidence() {
  confidence_ = 0;
}
inline float InferenceReply::_internal_confidence() const {
  return confidence_;
}
inline float InferenceReply::confidence() const {
  // @@protoc_insertion_point(field_get:algorithm_service.InferenceReply.confidence)
  return _internal_confidence();
}
inline void InferenceReply::_internal_set_confidence(float value) {
  
  confidence_ = value;
}
inline void InferenceReply::set_confidence(float value) {
  _internal_set_confidence(value);
  // @@protoc_insertion_point(field_set:algorithm_service.InferenceReply.confidence)
}

// float quality = 11;
inline void InferenceReply::clear_quality() {
  quality_ = 0;
}
inline float InferenceReply::_internal_quality() const {
  return quality_;
}
inline float InferenceReply::quality() const {
  // @@protoc_insertion_point(field_get:algorithm_service.InferenceReply.quality)
  return _internal_quality();
}
inline void InferenceReply::_internal_set_quality(float value) {
  
  quality_ = value;
}
inline void InferenceReply::set_quality(float value) {
  _internal_set_quality(value);
  // @@protoc_insertion_point(field_set:algorithm_service.InferenceReply.quality)
}

// string objname = 12;
inline void InferenceReply::clear_objname() {
  objname_.ClearToEmpty();
}
inline const std::string& InferenceReply::objname() const {
  // @@protoc_insertion_point(field_get:algorithm_service.InferenceReply.objname)
  return _internal_objname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InferenceReply::set_objname(ArgT0&& arg0, ArgT... args) {
 
 objname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:algorithm_service.InferenceReply.objname)
}
inline std::string* InferenceReply::mutable_objname() {
  std::string* _s = _internal_mutable_objname();
  // @@protoc_insertion_point(field_mutable:algorithm_service.InferenceReply.objname)
  return _s;
}
inline const std::string& InferenceReply::_internal_objname() const {
  return objname_.Get();
}
inline void InferenceReply::_internal_set_objname(const std::string& value) {
  
  objname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* InferenceReply::_internal_mutable_objname() {
  
  return objname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* InferenceReply::release_objname() {
  // @@protoc_insertion_point(field_release:algorithm_service.InferenceReply.objname)
  return objname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void InferenceReply::set_allocated_objname(std::string* objname) {
  if (objname != nullptr) {
    
  } else {
    
  }
  objname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), objname,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (objname_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    objname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:algorithm_service.InferenceReply.objname)
}

// string desc = 13;
inline void InferenceReply::clear_desc() {
  desc_.ClearToEmpty();
}
inline const std::string& InferenceReply::desc() const {
  // @@protoc_insertion_point(field_get:algorithm_service.InferenceReply.desc)
  return _internal_desc();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InferenceReply::set_desc(ArgT0&& arg0, ArgT... args) {
 
 desc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:algorithm_service.InferenceReply.desc)
}
inline std::string* InferenceReply::mutable_desc() {
  std::string* _s = _internal_mutable_desc();
  // @@protoc_insertion_point(field_mutable:algorithm_service.InferenceReply.desc)
  return _s;
}
inline const std::string& InferenceReply::_internal_desc() const {
  return desc_.Get();
}
inline void InferenceReply::_internal_set_desc(const std::string& value) {
  
  desc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* InferenceReply::_internal_mutable_desc() {
  
  return desc_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* InferenceReply::release_desc() {
  // @@protoc_insertion_point(field_release:algorithm_service.InferenceReply.desc)
  return desc_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void InferenceReply::set_allocated_desc(std::string* desc) {
  if (desc != nullptr) {
    
  } else {
    
  }
  desc_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), desc,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (desc_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    desc_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:algorithm_service.InferenceReply.desc)
}

// string ret_code = 14;
inline void InferenceReply::clear_ret_code() {
  ret_code_.ClearToEmpty();
}
inline const std::string& InferenceReply::ret_code() const {
  // @@protoc_insertion_point(field_get:algorithm_service.InferenceReply.ret_code)
  return _internal_ret_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InferenceReply::set_ret_code(ArgT0&& arg0, ArgT... args) {
 
 ret_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:algorithm_service.InferenceReply.ret_code)
}
inline std::string* InferenceReply::mutable_ret_code() {
  std::string* _s = _internal_mutable_ret_code();
  // @@protoc_insertion_point(field_mutable:algorithm_service.InferenceReply.ret_code)
  return _s;
}
inline const std::string& InferenceReply::_internal_ret_code() const {
  return ret_code_.Get();
}
inline void InferenceReply::_internal_set_ret_code(const std::string& value) {
  
  ret_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* InferenceReply::_internal_mutable_ret_code() {
  
  return ret_code_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* InferenceReply::release_ret_code() {
  // @@protoc_insertion_point(field_release:algorithm_service.InferenceReply.ret_code)
  return ret_code_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void InferenceReply::set_allocated_ret_code(std::string* ret_code) {
  if (ret_code != nullptr) {
    
  } else {
    
  }
  ret_code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ret_code,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (ret_code_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    ret_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:algorithm_service.InferenceReply.ret_code)
}

// string err_message = 15;
inline void InferenceReply::clear_err_message() {
  err_message_.ClearToEmpty();
}
inline const std::string& InferenceReply::err_message() const {
  // @@protoc_insertion_point(field_get:algorithm_service.InferenceReply.err_message)
  return _internal_err_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InferenceReply::set_err_message(ArgT0&& arg0, ArgT... args) {
 
 err_message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:algorithm_service.InferenceReply.err_message)
}
inline std::string* InferenceReply::mutable_err_message() {
  std::string* _s = _internal_mutable_err_message();
  // @@protoc_insertion_point(field_mutable:algorithm_service.InferenceReply.err_message)
  return _s;
}
inline const std::string& InferenceReply::_internal_err_message() const {
  return err_message_.Get();
}
inline void InferenceReply::_internal_set_err_message(const std::string& value) {
  
  err_message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* InferenceReply::_internal_mutable_err_message() {
  
  return err_message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* InferenceReply::release_err_message() {
  // @@protoc_insertion_point(field_release:algorithm_service.InferenceReply.err_message)
  return err_message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void InferenceReply::set_allocated_err_message(std::string* err_message) {
  if (err_message != nullptr) {
    
  } else {
    
  }
  err_message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), err_message,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (err_message_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    err_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:algorithm_service.InferenceReply.err_message)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace algorithm_service

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_algorithm_2eproto
