// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: model.proto

#include "model.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace model_service {
constexpr InferenceRequest::InferenceRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : data_(nullptr)
  , param_(nullptr)
  , model_enum_(0){}
struct InferenceRequestDefaultTypeInternal {
  constexpr InferenceRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~InferenceRequestDefaultTypeInternal() {}
  union {
    InferenceRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT InferenceRequestDefaultTypeInternal _InferenceRequest_default_instance_;
constexpr InferenceInputData::InferenceInputData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pic_data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , width_(0)
  , height_(0)
  , stride_(0)
  , use_physic_addr_(false)
  , pic_size_(int64_t{0})
  , sensor_id_(0){}
struct InferenceInputDataDefaultTypeInternal {
  constexpr InferenceInputDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~InferenceInputDataDefaultTypeInternal() {}
  union {
    InferenceInputData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT InferenceInputDataDefaultTypeInternal _InferenceInputData_default_instance_;
constexpr ThresholdParam::ThresholdParam(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : threshold_(0)
  , nms_threshold_(0){}
struct ThresholdParamDefaultTypeInternal {
  constexpr ThresholdParamDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ThresholdParamDefaultTypeInternal() {}
  union {
    ThresholdParam _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ThresholdParamDefaultTypeInternal _ThresholdParam_default_instance_;
constexpr InitModelRequest_ModelParamEntry_DoNotUse::InitModelRequest_ModelParamEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct InitModelRequest_ModelParamEntry_DoNotUseDefaultTypeInternal {
  constexpr InitModelRequest_ModelParamEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~InitModelRequest_ModelParamEntry_DoNotUseDefaultTypeInternal() {}
  union {
    InitModelRequest_ModelParamEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT InitModelRequest_ModelParamEntry_DoNotUseDefaultTypeInternal _InitModelRequest_ModelParamEntry_DoNotUse_default_instance_;
constexpr InitModelRequest::InitModelRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : model_param_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , model_enum_(0){}
struct InitModelRequestDefaultTypeInternal {
  constexpr InitModelRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~InitModelRequestDefaultTypeInternal() {}
  union {
    InitModelRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT InitModelRequestDefaultTypeInternal _InitModelRequest_default_instance_;
constexpr ReleaseModelRequest::ReleaseModelRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : model_enum_(0){}
struct ReleaseModelRequestDefaultTypeInternal {
  constexpr ReleaseModelRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReleaseModelRequestDefaultTypeInternal() {}
  union {
    ReleaseModelRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReleaseModelRequestDefaultTypeInternal _ReleaseModelRequest_default_instance_;
constexpr ModelReply::ModelReply(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : err_message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , ret_code_(0){}
struct ModelReplyDefaultTypeInternal {
  constexpr ModelReplyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ModelReplyDefaultTypeInternal() {}
  union {
    ModelReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ModelReplyDefaultTypeInternal _ModelReply_default_instance_;
constexpr BBox::BBox(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : objname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , desc_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , x0_(0)
  , y0_(0)
  , x1_(0)
  , y1_(0)
  , x_(0)
  , y_(0)
  , w_(0)
  , h_(0)
  , objectness_(0)
  , confidence_(0)
  , quality_(0){}
struct BBoxDefaultTypeInternal {
  constexpr BBoxDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BBoxDefaultTypeInternal() {}
  union {
    BBox _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BBoxDefaultTypeInternal _BBox_default_instance_;
constexpr InferenceReply::InferenceReply(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : bboxes_()
  , err_message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , ret_code_(0){}
struct InferenceReplyDefaultTypeInternal {
  constexpr InferenceReplyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~InferenceReplyDefaultTypeInternal() {}
  union {
    InferenceReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT InferenceReplyDefaultTypeInternal _InferenceReply_default_instance_;
}  // namespace model_service
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_model_2eproto[9];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_model_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_model_2eproto = nullptr;

const uint32_t TableStruct_model_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::model_service::InferenceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::model_service::InferenceRequest, model_enum_),
  PROTOBUF_FIELD_OFFSET(::model_service::InferenceRequest, data_),
  PROTOBUF_FIELD_OFFSET(::model_service::InferenceRequest, param_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::model_service::InferenceInputData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::model_service::InferenceInputData, width_),
  PROTOBUF_FIELD_OFFSET(::model_service::InferenceInputData, height_),
  PROTOBUF_FIELD_OFFSET(::model_service::InferenceInputData, stride_),
  PROTOBUF_FIELD_OFFSET(::model_service::InferenceInputData, pic_data_),
  PROTOBUF_FIELD_OFFSET(::model_service::InferenceInputData, pic_size_),
  PROTOBUF_FIELD_OFFSET(::model_service::InferenceInputData, use_physic_addr_),
  PROTOBUF_FIELD_OFFSET(::model_service::InferenceInputData, sensor_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::model_service::ThresholdParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::model_service::ThresholdParam, threshold_),
  PROTOBUF_FIELD_OFFSET(::model_service::ThresholdParam, nms_threshold_),
  PROTOBUF_FIELD_OFFSET(::model_service::InitModelRequest_ModelParamEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::model_service::InitModelRequest_ModelParamEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::model_service::InitModelRequest_ModelParamEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::model_service::InitModelRequest_ModelParamEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::model_service::InitModelRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::model_service::InitModelRequest, model_enum_),
  PROTOBUF_FIELD_OFFSET(::model_service::InitModelRequest, model_param_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::model_service::ReleaseModelRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::model_service::ReleaseModelRequest, model_enum_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::model_service::ModelReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::model_service::ModelReply, ret_code_),
  PROTOBUF_FIELD_OFFSET(::model_service::ModelReply, err_message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::model_service::BBox, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::model_service::BBox, x0_),
  PROTOBUF_FIELD_OFFSET(::model_service::BBox, y0_),
  PROTOBUF_FIELD_OFFSET(::model_service::BBox, x1_),
  PROTOBUF_FIELD_OFFSET(::model_service::BBox, y1_),
  PROTOBUF_FIELD_OFFSET(::model_service::BBox, x_),
  PROTOBUF_FIELD_OFFSET(::model_service::BBox, y_),
  PROTOBUF_FIELD_OFFSET(::model_service::BBox, w_),
  PROTOBUF_FIELD_OFFSET(::model_service::BBox, h_),
  PROTOBUF_FIELD_OFFSET(::model_service::BBox, objectness_),
  PROTOBUF_FIELD_OFFSET(::model_service::BBox, confidence_),
  PROTOBUF_FIELD_OFFSET(::model_service::BBox, quality_),
  PROTOBUF_FIELD_OFFSET(::model_service::BBox, objname_),
  PROTOBUF_FIELD_OFFSET(::model_service::BBox, desc_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::model_service::InferenceReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::model_service::InferenceReply, bboxes_),
  PROTOBUF_FIELD_OFFSET(::model_service::InferenceReply, ret_code_),
  PROTOBUF_FIELD_OFFSET(::model_service::InferenceReply, err_message_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::model_service::InferenceRequest)},
  { 9, -1, -1, sizeof(::model_service::InferenceInputData)},
  { 22, -1, -1, sizeof(::model_service::ThresholdParam)},
  { 30, 38, -1, sizeof(::model_service::InitModelRequest_ModelParamEntry_DoNotUse)},
  { 40, -1, -1, sizeof(::model_service::InitModelRequest)},
  { 48, -1, -1, sizeof(::model_service::ReleaseModelRequest)},
  { 55, -1, -1, sizeof(::model_service::ModelReply)},
  { 63, -1, -1, sizeof(::model_service::BBox)},
  { 82, -1, -1, sizeof(::model_service::InferenceReply)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::model_service::_InferenceRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::model_service::_InferenceInputData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::model_service::_ThresholdParam_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::model_service::_InitModelRequest_ModelParamEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::model_service::_InitModelRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::model_service::_ReleaseModelRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::model_service::_ModelReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::model_service::_BBox_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::model_service::_InferenceReply_default_instance_),
};

const char descriptor_table_protodef_model_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013model.proto\022\rmodel_service\"\205\001\n\020Inferen"
  "ceRequest\022\022\n\nmodel_enum\030\001 \001(\005\022/\n\004data\030\002 "
  "\001(\0132!.model_service.InferenceInputData\022,"
  "\n\005param\030\003 \001(\0132\035.model_service.ThresholdP"
  "aram\"\223\001\n\022InferenceInputData\022\r\n\005width\030\001 \001"
  "(\005\022\016\n\006height\030\002 \001(\005\022\016\n\006stride\030\003 \001(\005\022\020\n\010pi"
  "c_data\030\004 \001(\014\022\020\n\010pic_size\030\005 \001(\003\022\027\n\017use_ph"
  "ysic_addr\030\006 \001(\010\022\021\n\tsensor_id\030\007 \001(\005\":\n\016Th"
  "resholdParam\022\021\n\tthreshold\030\002 \001(\002\022\025\n\rnms_t"
  "hreshold\030\003 \001(\002\"\237\001\n\020InitModelRequest\022\022\n\nm"
  "odel_enum\030\001 \001(\005\022D\n\013model_param\030\002 \003(\0132/.m"
  "odel_service.InitModelRequest.ModelParam"
  "Entry\0321\n\017ModelParamEntry\022\013\n\003key\030\001 \001(\005\022\r\n"
  "\005value\030\002 \001(\t:\0028\001\")\n\023ReleaseModelRequest\022"
  "\022\n\nmodel_enum\030\001 \001(\005\"3\n\nModelReply\022\020\n\010ret"
  "_code\030\001 \001(\005\022\023\n\013err_message\030\002 \001(\t\"\272\001\n\004BBo"
  "x\022\n\n\002x0\030\001 \001(\002\022\n\n\002y0\030\002 \001(\002\022\n\n\002x1\030\003 \001(\002\022\n\n"
  "\002y1\030\004 \001(\002\022\t\n\001x\030\005 \001(\002\022\t\n\001y\030\006 \001(\002\022\t\n\001w\030\007 \001"
  "(\002\022\t\n\001h\030\010 \001(\002\022\022\n\nobjectness\030\t \001(\002\022\022\n\ncon"
  "fidence\030\n \001(\002\022\017\n\007quality\030\013 \001(\002\022\017\n\007objnam"
  "e\030\014 \001(\t\022\014\n\004desc\030\r \001(\t\"\\\n\016InferenceReply\022"
  "#\n\006bboxes\030\001 \003(\0132\023.model_service.BBox\022\020\n\010"
  "ret_code\030\002 \001(\005\022\023\n\013err_message\030\003 \001(\t2\362\001\n\005"
  "Model\022I\n\tInitModel\022\037.model_service.InitM"
  "odelRequest\032\031.model_service.ModelReply\"\000"
  "\022O\n\014ReleaseModel\022\".model_service.Release"
  "ModelRequest\032\031.model_service.ModelReply\""
  "\000\022M\n\tInference\022\037.model_service.Inference"
  "Request\032\035.model_service.InferenceReply\"\000"
  "B\004Z\002./b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_model_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_model_2eproto = {
  false, false, 1174, descriptor_table_protodef_model_2eproto, "model.proto", 
  &descriptor_table_model_2eproto_once, nullptr, 0, 9,
  schemas, file_default_instances, TableStruct_model_2eproto::offsets,
  file_level_metadata_model_2eproto, file_level_enum_descriptors_model_2eproto, file_level_service_descriptors_model_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_model_2eproto_getter() {
  return &descriptor_table_model_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_model_2eproto(&descriptor_table_model_2eproto);
namespace model_service {

// ===================================================================

class InferenceRequest::_Internal {
 public:
  static const ::model_service::InferenceInputData& data(const InferenceRequest* msg);
  static const ::model_service::ThresholdParam& param(const InferenceRequest* msg);
};

const ::model_service::InferenceInputData&
InferenceRequest::_Internal::data(const InferenceRequest* msg) {
  return *msg->data_;
}
const ::model_service::ThresholdParam&
InferenceRequest::_Internal::param(const InferenceRequest* msg) {
  return *msg->param_;
}
InferenceRequest::InferenceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:model_service.InferenceRequest)
}
InferenceRequest::InferenceRequest(const InferenceRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_data()) {
    data_ = new ::model_service::InferenceInputData(*from.data_);
  } else {
    data_ = nullptr;
  }
  if (from._internal_has_param()) {
    param_ = new ::model_service::ThresholdParam(*from.param_);
  } else {
    param_ = nullptr;
  }
  model_enum_ = from.model_enum_;
  // @@protoc_insertion_point(copy_constructor:model_service.InferenceRequest)
}

inline void InferenceRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&data_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&model_enum_) -
    reinterpret_cast<char*>(&data_)) + sizeof(model_enum_));
}

InferenceRequest::~InferenceRequest() {
  // @@protoc_insertion_point(destructor:model_service.InferenceRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void InferenceRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete data_;
  if (this != internal_default_instance()) delete param_;
}

void InferenceRequest::ArenaDtor(void* object) {
  InferenceRequest* _this = reinterpret_cast< InferenceRequest* >(object);
  (void)_this;
}
void InferenceRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InferenceRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InferenceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:model_service.InferenceRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
  if (GetArenaForAllocation() == nullptr && param_ != nullptr) {
    delete param_;
  }
  param_ = nullptr;
  model_enum_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InferenceRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 model_enum = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          model_enum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .model_service.InferenceInputData data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .model_service.ThresholdParam param = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_param(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InferenceRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:model_service.InferenceRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 model_enum = 1;
  if (this->_internal_model_enum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_model_enum(), target);
  }

  // .model_service.InferenceInputData data = 2;
  if (this->_internal_has_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::data(this), target, stream);
  }

  // .model_service.ThresholdParam param = 3;
  if (this->_internal_has_param()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::param(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:model_service.InferenceRequest)
  return target;
}

size_t InferenceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:model_service.InferenceRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .model_service.InferenceInputData data = 2;
  if (this->_internal_has_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_);
  }

  // .model_service.ThresholdParam param = 3;
  if (this->_internal_has_param()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *param_);
  }

  // int32 model_enum = 1;
  if (this->_internal_model_enum() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_model_enum());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InferenceRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    InferenceRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InferenceRequest::GetClassData() const { return &_class_data_; }

void InferenceRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<InferenceRequest *>(to)->MergeFrom(
      static_cast<const InferenceRequest &>(from));
}


void InferenceRequest::MergeFrom(const InferenceRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:model_service.InferenceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_data()) {
    _internal_mutable_data()->::model_service::InferenceInputData::MergeFrom(from._internal_data());
  }
  if (from._internal_has_param()) {
    _internal_mutable_param()->::model_service::ThresholdParam::MergeFrom(from._internal_param());
  }
  if (from._internal_model_enum() != 0) {
    _internal_set_model_enum(from._internal_model_enum());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InferenceRequest::CopyFrom(const InferenceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:model_service.InferenceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InferenceRequest::IsInitialized() const {
  return true;
}

void InferenceRequest::InternalSwap(InferenceRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InferenceRequest, model_enum_)
      + sizeof(InferenceRequest::model_enum_)
      - PROTOBUF_FIELD_OFFSET(InferenceRequest, data_)>(
          reinterpret_cast<char*>(&data_),
          reinterpret_cast<char*>(&other->data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InferenceRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_model_2eproto_getter, &descriptor_table_model_2eproto_once,
      file_level_metadata_model_2eproto[0]);
}

// ===================================================================

class InferenceInputData::_Internal {
 public:
};

InferenceInputData::InferenceInputData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:model_service.InferenceInputData)
}
InferenceInputData::InferenceInputData(const InferenceInputData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  pic_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    pic_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_pic_data().empty()) {
    pic_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_pic_data(), 
      GetArenaForAllocation());
  }
  ::memcpy(&width_, &from.width_,
    static_cast<size_t>(reinterpret_cast<char*>(&sensor_id_) -
    reinterpret_cast<char*>(&width_)) + sizeof(sensor_id_));
  // @@protoc_insertion_point(copy_constructor:model_service.InferenceInputData)
}

inline void InferenceInputData::SharedCtor() {
pic_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  pic_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&width_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&sensor_id_) -
    reinterpret_cast<char*>(&width_)) + sizeof(sensor_id_));
}

InferenceInputData::~InferenceInputData() {
  // @@protoc_insertion_point(destructor:model_service.InferenceInputData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void InferenceInputData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  pic_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void InferenceInputData::ArenaDtor(void* object) {
  InferenceInputData* _this = reinterpret_cast< InferenceInputData* >(object);
  (void)_this;
}
void InferenceInputData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InferenceInputData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InferenceInputData::Clear() {
// @@protoc_insertion_point(message_clear_start:model_service.InferenceInputData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pic_data_.ClearToEmpty();
  ::memset(&width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sensor_id_) -
      reinterpret_cast<char*>(&width_)) + sizeof(sensor_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InferenceInputData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 width = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 height = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 stride = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          stride_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes pic_data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_pic_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 pic_size = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          pic_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool use_physic_addr = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          use_physic_addr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 sensor_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          sensor_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InferenceInputData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:model_service.InferenceInputData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 width = 1;
  if (this->_internal_width() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_width(), target);
  }

  // int32 height = 2;
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_height(), target);
  }

  // int32 stride = 3;
  if (this->_internal_stride() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_stride(), target);
  }

  // bytes pic_data = 4;
  if (!this->_internal_pic_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_pic_data(), target);
  }

  // int64 pic_size = 5;
  if (this->_internal_pic_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_pic_size(), target);
  }

  // bool use_physic_addr = 6;
  if (this->_internal_use_physic_addr() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_use_physic_addr(), target);
  }

  // int32 sensor_id = 7;
  if (this->_internal_sensor_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_sensor_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:model_service.InferenceInputData)
  return target;
}

size_t InferenceInputData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:model_service.InferenceInputData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes pic_data = 4;
  if (!this->_internal_pic_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_pic_data());
  }

  // int32 width = 1;
  if (this->_internal_width() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_width());
  }

  // int32 height = 2;
  if (this->_internal_height() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_height());
  }

  // int32 stride = 3;
  if (this->_internal_stride() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_stride());
  }

  // bool use_physic_addr = 6;
  if (this->_internal_use_physic_addr() != 0) {
    total_size += 1 + 1;
  }

  // int64 pic_size = 5;
  if (this->_internal_pic_size() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_pic_size());
  }

  // int32 sensor_id = 7;
  if (this->_internal_sensor_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_sensor_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InferenceInputData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    InferenceInputData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InferenceInputData::GetClassData() const { return &_class_data_; }

void InferenceInputData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<InferenceInputData *>(to)->MergeFrom(
      static_cast<const InferenceInputData &>(from));
}


void InferenceInputData::MergeFrom(const InferenceInputData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:model_service.InferenceInputData)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_pic_data().empty()) {
    _internal_set_pic_data(from._internal_pic_data());
  }
  if (from._internal_width() != 0) {
    _internal_set_width(from._internal_width());
  }
  if (from._internal_height() != 0) {
    _internal_set_height(from._internal_height());
  }
  if (from._internal_stride() != 0) {
    _internal_set_stride(from._internal_stride());
  }
  if (from._internal_use_physic_addr() != 0) {
    _internal_set_use_physic_addr(from._internal_use_physic_addr());
  }
  if (from._internal_pic_size() != 0) {
    _internal_set_pic_size(from._internal_pic_size());
  }
  if (from._internal_sensor_id() != 0) {
    _internal_set_sensor_id(from._internal_sensor_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InferenceInputData::CopyFrom(const InferenceInputData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:model_service.InferenceInputData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InferenceInputData::IsInitialized() const {
  return true;
}

void InferenceInputData::InternalSwap(InferenceInputData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &pic_data_, lhs_arena,
      &other->pic_data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InferenceInputData, sensor_id_)
      + sizeof(InferenceInputData::sensor_id_)
      - PROTOBUF_FIELD_OFFSET(InferenceInputData, width_)>(
          reinterpret_cast<char*>(&width_),
          reinterpret_cast<char*>(&other->width_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InferenceInputData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_model_2eproto_getter, &descriptor_table_model_2eproto_once,
      file_level_metadata_model_2eproto[1]);
}

// ===================================================================

class ThresholdParam::_Internal {
 public:
};

ThresholdParam::ThresholdParam(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:model_service.ThresholdParam)
}
ThresholdParam::ThresholdParam(const ThresholdParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&threshold_, &from.threshold_,
    static_cast<size_t>(reinterpret_cast<char*>(&nms_threshold_) -
    reinterpret_cast<char*>(&threshold_)) + sizeof(nms_threshold_));
  // @@protoc_insertion_point(copy_constructor:model_service.ThresholdParam)
}

inline void ThresholdParam::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&threshold_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&nms_threshold_) -
    reinterpret_cast<char*>(&threshold_)) + sizeof(nms_threshold_));
}

ThresholdParam::~ThresholdParam() {
  // @@protoc_insertion_point(destructor:model_service.ThresholdParam)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ThresholdParam::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ThresholdParam::ArenaDtor(void* object) {
  ThresholdParam* _this = reinterpret_cast< ThresholdParam* >(object);
  (void)_this;
}
void ThresholdParam::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ThresholdParam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ThresholdParam::Clear() {
// @@protoc_insertion_point(message_clear_start:model_service.ThresholdParam)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&threshold_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nms_threshold_) -
      reinterpret_cast<char*>(&threshold_)) + sizeof(nms_threshold_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ThresholdParam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float threshold = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float nms_threshold = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          nms_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ThresholdParam::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:model_service.ThresholdParam)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float threshold = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_threshold = this->_internal_threshold();
  uint32_t raw_threshold;
  memcpy(&raw_threshold, &tmp_threshold, sizeof(tmp_threshold));
  if (raw_threshold != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_threshold(), target);
  }

  // float nms_threshold = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_nms_threshold = this->_internal_nms_threshold();
  uint32_t raw_nms_threshold;
  memcpy(&raw_nms_threshold, &tmp_nms_threshold, sizeof(tmp_nms_threshold));
  if (raw_nms_threshold != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_nms_threshold(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:model_service.ThresholdParam)
  return target;
}

size_t ThresholdParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:model_service.ThresholdParam)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float threshold = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_threshold = this->_internal_threshold();
  uint32_t raw_threshold;
  memcpy(&raw_threshold, &tmp_threshold, sizeof(tmp_threshold));
  if (raw_threshold != 0) {
    total_size += 1 + 4;
  }

  // float nms_threshold = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_nms_threshold = this->_internal_nms_threshold();
  uint32_t raw_nms_threshold;
  memcpy(&raw_nms_threshold, &tmp_nms_threshold, sizeof(tmp_nms_threshold));
  if (raw_nms_threshold != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ThresholdParam::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ThresholdParam::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ThresholdParam::GetClassData() const { return &_class_data_; }

void ThresholdParam::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ThresholdParam *>(to)->MergeFrom(
      static_cast<const ThresholdParam &>(from));
}


void ThresholdParam::MergeFrom(const ThresholdParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:model_service.ThresholdParam)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_threshold = from._internal_threshold();
  uint32_t raw_threshold;
  memcpy(&raw_threshold, &tmp_threshold, sizeof(tmp_threshold));
  if (raw_threshold != 0) {
    _internal_set_threshold(from._internal_threshold());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_nms_threshold = from._internal_nms_threshold();
  uint32_t raw_nms_threshold;
  memcpy(&raw_nms_threshold, &tmp_nms_threshold, sizeof(tmp_nms_threshold));
  if (raw_nms_threshold != 0) {
    _internal_set_nms_threshold(from._internal_nms_threshold());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ThresholdParam::CopyFrom(const ThresholdParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:model_service.ThresholdParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ThresholdParam::IsInitialized() const {
  return true;
}

void ThresholdParam::InternalSwap(ThresholdParam* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ThresholdParam, nms_threshold_)
      + sizeof(ThresholdParam::nms_threshold_)
      - PROTOBUF_FIELD_OFFSET(ThresholdParam, threshold_)>(
          reinterpret_cast<char*>(&threshold_),
          reinterpret_cast<char*>(&other->threshold_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ThresholdParam::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_model_2eproto_getter, &descriptor_table_model_2eproto_once,
      file_level_metadata_model_2eproto[2]);
}

// ===================================================================

InitModelRequest_ModelParamEntry_DoNotUse::InitModelRequest_ModelParamEntry_DoNotUse() {}
InitModelRequest_ModelParamEntry_DoNotUse::InitModelRequest_ModelParamEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void InitModelRequest_ModelParamEntry_DoNotUse::MergeFrom(const InitModelRequest_ModelParamEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata InitModelRequest_ModelParamEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_model_2eproto_getter, &descriptor_table_model_2eproto_once,
      file_level_metadata_model_2eproto[3]);
}

// ===================================================================

class InitModelRequest::_Internal {
 public:
};

InitModelRequest::InitModelRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  model_param_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:model_service.InitModelRequest)
}
InitModelRequest::InitModelRequest(const InitModelRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  model_param_.MergeFrom(from.model_param_);
  model_enum_ = from.model_enum_;
  // @@protoc_insertion_point(copy_constructor:model_service.InitModelRequest)
}

inline void InitModelRequest::SharedCtor() {
model_enum_ = 0;
}

InitModelRequest::~InitModelRequest() {
  // @@protoc_insertion_point(destructor:model_service.InitModelRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void InitModelRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void InitModelRequest::ArenaDtor(void* object) {
  InitModelRequest* _this = reinterpret_cast< InitModelRequest* >(object);
  (void)_this;
  _this->model_param_. ~MapField();
}
inline void InitModelRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &InitModelRequest::ArenaDtor);
  }
}
void InitModelRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InitModelRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:model_service.InitModelRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  model_param_.Clear();
  model_enum_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InitModelRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 model_enum = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          model_enum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<int32, string> model_param = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&model_param_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InitModelRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:model_service.InitModelRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 model_enum = 1;
  if (this->_internal_model_enum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_model_enum(), target);
  }

  // map<int32, string> model_param = 2;
  if (!this->_internal_model_param().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< int32_t, std::string >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< int32_t, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "model_service.InitModelRequest.ModelParamEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_model_param().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_model_param().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< int32_t, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< int32_t, std::string >::const_iterator
          it = this->_internal_model_param().begin();
          it != this->_internal_model_param().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = InitModelRequest_ModelParamEntry_DoNotUse::Funcs::InternalSerialize(2, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)].second));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< int32_t, std::string >::const_iterator
          it = this->_internal_model_param().begin();
          it != this->_internal_model_param().end(); ++it) {
        target = InitModelRequest_ModelParamEntry_DoNotUse::Funcs::InternalSerialize(2, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:model_service.InitModelRequest)
  return target;
}

size_t InitModelRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:model_service.InitModelRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<int32, string> model_param = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_model_param_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< int32_t, std::string >::const_iterator
      it = this->_internal_model_param().begin();
      it != this->_internal_model_param().end(); ++it) {
    total_size += InitModelRequest_ModelParamEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // int32 model_enum = 1;
  if (this->_internal_model_enum() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_model_enum());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InitModelRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    InitModelRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InitModelRequest::GetClassData() const { return &_class_data_; }

void InitModelRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<InitModelRequest *>(to)->MergeFrom(
      static_cast<const InitModelRequest &>(from));
}


void InitModelRequest::MergeFrom(const InitModelRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:model_service.InitModelRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  model_param_.MergeFrom(from.model_param_);
  if (from._internal_model_enum() != 0) {
    _internal_set_model_enum(from._internal_model_enum());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InitModelRequest::CopyFrom(const InitModelRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:model_service.InitModelRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InitModelRequest::IsInitialized() const {
  return true;
}

void InitModelRequest::InternalSwap(InitModelRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  model_param_.InternalSwap(&other->model_param_);
  swap(model_enum_, other->model_enum_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InitModelRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_model_2eproto_getter, &descriptor_table_model_2eproto_once,
      file_level_metadata_model_2eproto[4]);
}

// ===================================================================

class ReleaseModelRequest::_Internal {
 public:
};

ReleaseModelRequest::ReleaseModelRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:model_service.ReleaseModelRequest)
}
ReleaseModelRequest::ReleaseModelRequest(const ReleaseModelRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  model_enum_ = from.model_enum_;
  // @@protoc_insertion_point(copy_constructor:model_service.ReleaseModelRequest)
}

inline void ReleaseModelRequest::SharedCtor() {
model_enum_ = 0;
}

ReleaseModelRequest::~ReleaseModelRequest() {
  // @@protoc_insertion_point(destructor:model_service.ReleaseModelRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ReleaseModelRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ReleaseModelRequest::ArenaDtor(void* object) {
  ReleaseModelRequest* _this = reinterpret_cast< ReleaseModelRequest* >(object);
  (void)_this;
}
void ReleaseModelRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReleaseModelRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReleaseModelRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:model_service.ReleaseModelRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  model_enum_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReleaseModelRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 model_enum = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          model_enum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReleaseModelRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:model_service.ReleaseModelRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 model_enum = 1;
  if (this->_internal_model_enum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_model_enum(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:model_service.ReleaseModelRequest)
  return target;
}

size_t ReleaseModelRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:model_service.ReleaseModelRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 model_enum = 1;
  if (this->_internal_model_enum() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_model_enum());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReleaseModelRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ReleaseModelRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReleaseModelRequest::GetClassData() const { return &_class_data_; }

void ReleaseModelRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ReleaseModelRequest *>(to)->MergeFrom(
      static_cast<const ReleaseModelRequest &>(from));
}


void ReleaseModelRequest::MergeFrom(const ReleaseModelRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:model_service.ReleaseModelRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_model_enum() != 0) {
    _internal_set_model_enum(from._internal_model_enum());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReleaseModelRequest::CopyFrom(const ReleaseModelRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:model_service.ReleaseModelRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReleaseModelRequest::IsInitialized() const {
  return true;
}

void ReleaseModelRequest::InternalSwap(ReleaseModelRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(model_enum_, other->model_enum_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReleaseModelRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_model_2eproto_getter, &descriptor_table_model_2eproto_once,
      file_level_metadata_model_2eproto[5]);
}

// ===================================================================

class ModelReply::_Internal {
 public:
};

ModelReply::ModelReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:model_service.ModelReply)
}
ModelReply::ModelReply(const ModelReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  err_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    err_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_err_message().empty()) {
    err_message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_err_message(), 
      GetArenaForAllocation());
  }
  ret_code_ = from.ret_code_;
  // @@protoc_insertion_point(copy_constructor:model_service.ModelReply)
}

inline void ModelReply::SharedCtor() {
err_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  err_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
ret_code_ = 0;
}

ModelReply::~ModelReply() {
  // @@protoc_insertion_point(destructor:model_service.ModelReply)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ModelReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  err_message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ModelReply::ArenaDtor(void* object) {
  ModelReply* _this = reinterpret_cast< ModelReply* >(object);
  (void)_this;
}
void ModelReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ModelReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ModelReply::Clear() {
// @@protoc_insertion_point(message_clear_start:model_service.ModelReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  err_message_.ClearToEmpty();
  ret_code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModelReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 ret_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          ret_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string err_message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_err_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "model_service.ModelReply.err_message"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ModelReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:model_service.ModelReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ret_code = 1;
  if (this->_internal_ret_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_ret_code(), target);
  }

  // string err_message = 2;
  if (!this->_internal_err_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_err_message().data(), static_cast<int>(this->_internal_err_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "model_service.ModelReply.err_message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_err_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:model_service.ModelReply)
  return target;
}

size_t ModelReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:model_service.ModelReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string err_message = 2;
  if (!this->_internal_err_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_err_message());
  }

  // int32 ret_code = 1;
  if (this->_internal_ret_code() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_ret_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ModelReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ModelReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ModelReply::GetClassData() const { return &_class_data_; }

void ModelReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ModelReply *>(to)->MergeFrom(
      static_cast<const ModelReply &>(from));
}


void ModelReply::MergeFrom(const ModelReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:model_service.ModelReply)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_err_message().empty()) {
    _internal_set_err_message(from._internal_err_message());
  }
  if (from._internal_ret_code() != 0) {
    _internal_set_ret_code(from._internal_ret_code());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ModelReply::CopyFrom(const ModelReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:model_service.ModelReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelReply::IsInitialized() const {
  return true;
}

void ModelReply::InternalSwap(ModelReply* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &err_message_, lhs_arena,
      &other->err_message_, rhs_arena
  );
  swap(ret_code_, other->ret_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ModelReply::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_model_2eproto_getter, &descriptor_table_model_2eproto_once,
      file_level_metadata_model_2eproto[6]);
}

// ===================================================================

class BBox::_Internal {
 public:
};

BBox::BBox(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:model_service.BBox)
}
BBox::BBox(const BBox& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  objname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    objname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_objname().empty()) {
    objname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_objname(), 
      GetArenaForAllocation());
  }
  desc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    desc_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_desc().empty()) {
    desc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_desc(), 
      GetArenaForAllocation());
  }
  ::memcpy(&x0_, &from.x0_,
    static_cast<size_t>(reinterpret_cast<char*>(&quality_) -
    reinterpret_cast<char*>(&x0_)) + sizeof(quality_));
  // @@protoc_insertion_point(copy_constructor:model_service.BBox)
}

inline void BBox::SharedCtor() {
objname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  objname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
desc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  desc_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&x0_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&quality_) -
    reinterpret_cast<char*>(&x0_)) + sizeof(quality_));
}

BBox::~BBox() {
  // @@protoc_insertion_point(destructor:model_service.BBox)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BBox::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  objname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  desc_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BBox::ArenaDtor(void* object) {
  BBox* _this = reinterpret_cast< BBox* >(object);
  (void)_this;
}
void BBox::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BBox::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BBox::Clear() {
// @@protoc_insertion_point(message_clear_start:model_service.BBox)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  objname_.ClearToEmpty();
  desc_.ClearToEmpty();
  ::memset(&x0_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&quality_) -
      reinterpret_cast<char*>(&x0_)) + sizeof(quality_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BBox::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float x0 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          x0_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float y0 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          y0_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float x1 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          x1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float y1 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          y1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float x = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float y = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float w = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          w_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float h = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 69)) {
          h_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float objectness = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 77)) {
          objectness_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float confidence = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 85)) {
          confidence_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float quality = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 93)) {
          quality_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // string objname = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_objname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "model_service.BBox.objname"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string desc = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_desc();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "model_service.BBox.desc"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BBox::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:model_service.BBox)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float x0 = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x0 = this->_internal_x0();
  uint32_t raw_x0;
  memcpy(&raw_x0, &tmp_x0, sizeof(tmp_x0));
  if (raw_x0 != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_x0(), target);
  }

  // float y0 = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y0 = this->_internal_y0();
  uint32_t raw_y0;
  memcpy(&raw_y0, &tmp_y0, sizeof(tmp_y0));
  if (raw_y0 != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_y0(), target);
  }

  // float x1 = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x1 = this->_internal_x1();
  uint32_t raw_x1;
  memcpy(&raw_x1, &tmp_x1, sizeof(tmp_x1));
  if (raw_x1 != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_x1(), target);
  }

  // float y1 = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y1 = this->_internal_y1();
  uint32_t raw_y1;
  memcpy(&raw_y1, &tmp_y1, sizeof(tmp_y1));
  if (raw_y1 != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_y1(), target);
  }

  // float x = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_x(), target);
  }

  // float y = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_y(), target);
  }

  // float w = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_w = this->_internal_w();
  uint32_t raw_w;
  memcpy(&raw_w, &tmp_w, sizeof(tmp_w));
  if (raw_w != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_w(), target);
  }

  // float h = 8;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_h = this->_internal_h();
  uint32_t raw_h;
  memcpy(&raw_h, &tmp_h, sizeof(tmp_h));
  if (raw_h != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_h(), target);
  }

  // float objectness = 9;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_objectness = this->_internal_objectness();
  uint32_t raw_objectness;
  memcpy(&raw_objectness, &tmp_objectness, sizeof(tmp_objectness));
  if (raw_objectness != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_objectness(), target);
  }

  // float confidence = 10;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_confidence = this->_internal_confidence();
  uint32_t raw_confidence;
  memcpy(&raw_confidence, &tmp_confidence, sizeof(tmp_confidence));
  if (raw_confidence != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->_internal_confidence(), target);
  }

  // float quality = 11;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_quality = this->_internal_quality();
  uint32_t raw_quality;
  memcpy(&raw_quality, &tmp_quality, sizeof(tmp_quality));
  if (raw_quality != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(11, this->_internal_quality(), target);
  }

  // string objname = 12;
  if (!this->_internal_objname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_objname().data(), static_cast<int>(this->_internal_objname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "model_service.BBox.objname");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_objname(), target);
  }

  // string desc = 13;
  if (!this->_internal_desc().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_desc().data(), static_cast<int>(this->_internal_desc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "model_service.BBox.desc");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_desc(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:model_service.BBox)
  return target;
}

size_t BBox::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:model_service.BBox)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string objname = 12;
  if (!this->_internal_objname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_objname());
  }

  // string desc = 13;
  if (!this->_internal_desc().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_desc());
  }

  // float x0 = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x0 = this->_internal_x0();
  uint32_t raw_x0;
  memcpy(&raw_x0, &tmp_x0, sizeof(tmp_x0));
  if (raw_x0 != 0) {
    total_size += 1 + 4;
  }

  // float y0 = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y0 = this->_internal_y0();
  uint32_t raw_y0;
  memcpy(&raw_y0, &tmp_y0, sizeof(tmp_y0));
  if (raw_y0 != 0) {
    total_size += 1 + 4;
  }

  // float x1 = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x1 = this->_internal_x1();
  uint32_t raw_x1;
  memcpy(&raw_x1, &tmp_x1, sizeof(tmp_x1));
  if (raw_x1 != 0) {
    total_size += 1 + 4;
  }

  // float y1 = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y1 = this->_internal_y1();
  uint32_t raw_y1;
  memcpy(&raw_y1, &tmp_y1, sizeof(tmp_y1));
  if (raw_y1 != 0) {
    total_size += 1 + 4;
  }

  // float x = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    total_size += 1 + 4;
  }

  // float y = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    total_size += 1 + 4;
  }

  // float w = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_w = this->_internal_w();
  uint32_t raw_w;
  memcpy(&raw_w, &tmp_w, sizeof(tmp_w));
  if (raw_w != 0) {
    total_size += 1 + 4;
  }

  // float h = 8;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_h = this->_internal_h();
  uint32_t raw_h;
  memcpy(&raw_h, &tmp_h, sizeof(tmp_h));
  if (raw_h != 0) {
    total_size += 1 + 4;
  }

  // float objectness = 9;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_objectness = this->_internal_objectness();
  uint32_t raw_objectness;
  memcpy(&raw_objectness, &tmp_objectness, sizeof(tmp_objectness));
  if (raw_objectness != 0) {
    total_size += 1 + 4;
  }

  // float confidence = 10;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_confidence = this->_internal_confidence();
  uint32_t raw_confidence;
  memcpy(&raw_confidence, &tmp_confidence, sizeof(tmp_confidence));
  if (raw_confidence != 0) {
    total_size += 1 + 4;
  }

  // float quality = 11;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_quality = this->_internal_quality();
  uint32_t raw_quality;
  memcpy(&raw_quality, &tmp_quality, sizeof(tmp_quality));
  if (raw_quality != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BBox::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BBox::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BBox::GetClassData() const { return &_class_data_; }

void BBox::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<BBox *>(to)->MergeFrom(
      static_cast<const BBox &>(from));
}


void BBox::MergeFrom(const BBox& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:model_service.BBox)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_objname().empty()) {
    _internal_set_objname(from._internal_objname());
  }
  if (!from._internal_desc().empty()) {
    _internal_set_desc(from._internal_desc());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x0 = from._internal_x0();
  uint32_t raw_x0;
  memcpy(&raw_x0, &tmp_x0, sizeof(tmp_x0));
  if (raw_x0 != 0) {
    _internal_set_x0(from._internal_x0());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y0 = from._internal_y0();
  uint32_t raw_y0;
  memcpy(&raw_y0, &tmp_y0, sizeof(tmp_y0));
  if (raw_y0 != 0) {
    _internal_set_y0(from._internal_y0());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x1 = from._internal_x1();
  uint32_t raw_x1;
  memcpy(&raw_x1, &tmp_x1, sizeof(tmp_x1));
  if (raw_x1 != 0) {
    _internal_set_x1(from._internal_x1());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y1 = from._internal_y1();
  uint32_t raw_y1;
  memcpy(&raw_y1, &tmp_y1, sizeof(tmp_y1));
  if (raw_y1 != 0) {
    _internal_set_y1(from._internal_y1());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = from._internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    _internal_set_x(from._internal_x());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = from._internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    _internal_set_y(from._internal_y());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_w = from._internal_w();
  uint32_t raw_w;
  memcpy(&raw_w, &tmp_w, sizeof(tmp_w));
  if (raw_w != 0) {
    _internal_set_w(from._internal_w());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_h = from._internal_h();
  uint32_t raw_h;
  memcpy(&raw_h, &tmp_h, sizeof(tmp_h));
  if (raw_h != 0) {
    _internal_set_h(from._internal_h());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_objectness = from._internal_objectness();
  uint32_t raw_objectness;
  memcpy(&raw_objectness, &tmp_objectness, sizeof(tmp_objectness));
  if (raw_objectness != 0) {
    _internal_set_objectness(from._internal_objectness());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_confidence = from._internal_confidence();
  uint32_t raw_confidence;
  memcpy(&raw_confidence, &tmp_confidence, sizeof(tmp_confidence));
  if (raw_confidence != 0) {
    _internal_set_confidence(from._internal_confidence());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_quality = from._internal_quality();
  uint32_t raw_quality;
  memcpy(&raw_quality, &tmp_quality, sizeof(tmp_quality));
  if (raw_quality != 0) {
    _internal_set_quality(from._internal_quality());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BBox::CopyFrom(const BBox& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:model_service.BBox)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BBox::IsInitialized() const {
  return true;
}

void BBox::InternalSwap(BBox* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &objname_, lhs_arena,
      &other->objname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &desc_, lhs_arena,
      &other->desc_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BBox, quality_)
      + sizeof(BBox::quality_)
      - PROTOBUF_FIELD_OFFSET(BBox, x0_)>(
          reinterpret_cast<char*>(&x0_),
          reinterpret_cast<char*>(&other->x0_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BBox::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_model_2eproto_getter, &descriptor_table_model_2eproto_once,
      file_level_metadata_model_2eproto[7]);
}

// ===================================================================

class InferenceReply::_Internal {
 public:
};

InferenceReply::InferenceReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  bboxes_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:model_service.InferenceReply)
}
InferenceReply::InferenceReply(const InferenceReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      bboxes_(from.bboxes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  err_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    err_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_err_message().empty()) {
    err_message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_err_message(), 
      GetArenaForAllocation());
  }
  ret_code_ = from.ret_code_;
  // @@protoc_insertion_point(copy_constructor:model_service.InferenceReply)
}

inline void InferenceReply::SharedCtor() {
err_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  err_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
ret_code_ = 0;
}

InferenceReply::~InferenceReply() {
  // @@protoc_insertion_point(destructor:model_service.InferenceReply)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void InferenceReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  err_message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void InferenceReply::ArenaDtor(void* object) {
  InferenceReply* _this = reinterpret_cast< InferenceReply* >(object);
  (void)_this;
}
void InferenceReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InferenceReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InferenceReply::Clear() {
// @@protoc_insertion_point(message_clear_start:model_service.InferenceReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bboxes_.Clear();
  err_message_.ClearToEmpty();
  ret_code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InferenceReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .model_service.BBox bboxes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_bboxes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int32 ret_code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          ret_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string err_message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_err_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "model_service.InferenceReply.err_message"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InferenceReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:model_service.InferenceReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .model_service.BBox bboxes = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_bboxes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_bboxes(i), target, stream);
  }

  // int32 ret_code = 2;
  if (this->_internal_ret_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_ret_code(), target);
  }

  // string err_message = 3;
  if (!this->_internal_err_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_err_message().data(), static_cast<int>(this->_internal_err_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "model_service.InferenceReply.err_message");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_err_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:model_service.InferenceReply)
  return target;
}

size_t InferenceReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:model_service.InferenceReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .model_service.BBox bboxes = 1;
  total_size += 1UL * this->_internal_bboxes_size();
  for (const auto& msg : this->bboxes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string err_message = 3;
  if (!this->_internal_err_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_err_message());
  }

  // int32 ret_code = 2;
  if (this->_internal_ret_code() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_ret_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InferenceReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    InferenceReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InferenceReply::GetClassData() const { return &_class_data_; }

void InferenceReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<InferenceReply *>(to)->MergeFrom(
      static_cast<const InferenceReply &>(from));
}


void InferenceReply::MergeFrom(const InferenceReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:model_service.InferenceReply)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  bboxes_.MergeFrom(from.bboxes_);
  if (!from._internal_err_message().empty()) {
    _internal_set_err_message(from._internal_err_message());
  }
  if (from._internal_ret_code() != 0) {
    _internal_set_ret_code(from._internal_ret_code());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InferenceReply::CopyFrom(const InferenceReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:model_service.InferenceReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InferenceReply::IsInitialized() const {
  return true;
}

void InferenceReply::InternalSwap(InferenceReply* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  bboxes_.InternalSwap(&other->bboxes_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &err_message_, lhs_arena,
      &other->err_message_, rhs_arena
  );
  swap(ret_code_, other->ret_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InferenceReply::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_model_2eproto_getter, &descriptor_table_model_2eproto_once,
      file_level_metadata_model_2eproto[8]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace model_service
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::model_service::InferenceRequest* Arena::CreateMaybeMessage< ::model_service::InferenceRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::model_service::InferenceRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::model_service::InferenceInputData* Arena::CreateMaybeMessage< ::model_service::InferenceInputData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::model_service::InferenceInputData >(arena);
}
template<> PROTOBUF_NOINLINE ::model_service::ThresholdParam* Arena::CreateMaybeMessage< ::model_service::ThresholdParam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::model_service::ThresholdParam >(arena);
}
template<> PROTOBUF_NOINLINE ::model_service::InitModelRequest_ModelParamEntry_DoNotUse* Arena::CreateMaybeMessage< ::model_service::InitModelRequest_ModelParamEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::model_service::InitModelRequest_ModelParamEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::model_service::InitModelRequest* Arena::CreateMaybeMessage< ::model_service::InitModelRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::model_service::InitModelRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::model_service::ReleaseModelRequest* Arena::CreateMaybeMessage< ::model_service::ReleaseModelRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::model_service::ReleaseModelRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::model_service::ModelReply* Arena::CreateMaybeMessage< ::model_service::ModelReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::model_service::ModelReply >(arena);
}
template<> PROTOBUF_NOINLINE ::model_service::BBox* Arena::CreateMaybeMessage< ::model_service::BBox >(Arena* arena) {
  return Arena::CreateMessageInternal< ::model_service::BBox >(arena);
}
template<> PROTOBUF_NOINLINE ::model_service::InferenceReply* Arena::CreateMaybeMessage< ::model_service::InferenceReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::model_service::InferenceReply >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
