// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: model.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_model_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_model_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_model_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_model_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[9]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_model_2eproto;
namespace model_service {
class BBox;
struct BBoxDefaultTypeInternal;
extern BBoxDefaultTypeInternal _BBox_default_instance_;
class InferenceInputData;
struct InferenceInputDataDefaultTypeInternal;
extern InferenceInputDataDefaultTypeInternal _InferenceInputData_default_instance_;
class InferenceReply;
struct InferenceReplyDefaultTypeInternal;
extern InferenceReplyDefaultTypeInternal _InferenceReply_default_instance_;
class InferenceRequest;
struct InferenceRequestDefaultTypeInternal;
extern InferenceRequestDefaultTypeInternal _InferenceRequest_default_instance_;
class InitModelRequest;
struct InitModelRequestDefaultTypeInternal;
extern InitModelRequestDefaultTypeInternal _InitModelRequest_default_instance_;
class InitModelRequest_ModelParamEntry_DoNotUse;
struct InitModelRequest_ModelParamEntry_DoNotUseDefaultTypeInternal;
extern InitModelRequest_ModelParamEntry_DoNotUseDefaultTypeInternal _InitModelRequest_ModelParamEntry_DoNotUse_default_instance_;
class ModelReply;
struct ModelReplyDefaultTypeInternal;
extern ModelReplyDefaultTypeInternal _ModelReply_default_instance_;
class ReleaseModelRequest;
struct ReleaseModelRequestDefaultTypeInternal;
extern ReleaseModelRequestDefaultTypeInternal _ReleaseModelRequest_default_instance_;
class ThresholdParam;
struct ThresholdParamDefaultTypeInternal;
extern ThresholdParamDefaultTypeInternal _ThresholdParam_default_instance_;
}  // namespace model_service
PROTOBUF_NAMESPACE_OPEN
template<> ::model_service::BBox* Arena::CreateMaybeMessage<::model_service::BBox>(Arena*);
template<> ::model_service::InferenceInputData* Arena::CreateMaybeMessage<::model_service::InferenceInputData>(Arena*);
template<> ::model_service::InferenceReply* Arena::CreateMaybeMessage<::model_service::InferenceReply>(Arena*);
template<> ::model_service::InferenceRequest* Arena::CreateMaybeMessage<::model_service::InferenceRequest>(Arena*);
template<> ::model_service::InitModelRequest* Arena::CreateMaybeMessage<::model_service::InitModelRequest>(Arena*);
template<> ::model_service::InitModelRequest_ModelParamEntry_DoNotUse* Arena::CreateMaybeMessage<::model_service::InitModelRequest_ModelParamEntry_DoNotUse>(Arena*);
template<> ::model_service::ModelReply* Arena::CreateMaybeMessage<::model_service::ModelReply>(Arena*);
template<> ::model_service::ReleaseModelRequest* Arena::CreateMaybeMessage<::model_service::ReleaseModelRequest>(Arena*);
template<> ::model_service::ThresholdParam* Arena::CreateMaybeMessage<::model_service::ThresholdParam>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace model_service {

// ===================================================================

class InferenceRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:model_service.InferenceRequest) */ {
 public:
  inline InferenceRequest() : InferenceRequest(nullptr) {}
  ~InferenceRequest() override;
  explicit constexpr InferenceRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InferenceRequest(const InferenceRequest& from);
  InferenceRequest(InferenceRequest&& from) noexcept
    : InferenceRequest() {
    *this = ::std::move(from);
  }

  inline InferenceRequest& operator=(const InferenceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline InferenceRequest& operator=(InferenceRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InferenceRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const InferenceRequest* internal_default_instance() {
    return reinterpret_cast<const InferenceRequest*>(
               &_InferenceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(InferenceRequest& a, InferenceRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(InferenceRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InferenceRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InferenceRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InferenceRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InferenceRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const InferenceRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InferenceRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "model_service.InferenceRequest";
  }
  protected:
  explicit InferenceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 2,
    kParamFieldNumber = 3,
    kModelEnumFieldNumber = 1,
  };
  // .model_service.InferenceInputData data = 2;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::model_service::InferenceInputData& data() const;
  PROTOBUF_NODISCARD ::model_service::InferenceInputData* release_data();
  ::model_service::InferenceInputData* mutable_data();
  void set_allocated_data(::model_service::InferenceInputData* data);
  private:
  const ::model_service::InferenceInputData& _internal_data() const;
  ::model_service::InferenceInputData* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::model_service::InferenceInputData* data);
  ::model_service::InferenceInputData* unsafe_arena_release_data();

  // .model_service.ThresholdParam param = 3;
  bool has_param() const;
  private:
  bool _internal_has_param() const;
  public:
  void clear_param();
  const ::model_service::ThresholdParam& param() const;
  PROTOBUF_NODISCARD ::model_service::ThresholdParam* release_param();
  ::model_service::ThresholdParam* mutable_param();
  void set_allocated_param(::model_service::ThresholdParam* param);
  private:
  const ::model_service::ThresholdParam& _internal_param() const;
  ::model_service::ThresholdParam* _internal_mutable_param();
  public:
  void unsafe_arena_set_allocated_param(
      ::model_service::ThresholdParam* param);
  ::model_service::ThresholdParam* unsafe_arena_release_param();

  // int32 model_enum = 1;
  void clear_model_enum();
  int32_t model_enum() const;
  void set_model_enum(int32_t value);
  private:
  int32_t _internal_model_enum() const;
  void _internal_set_model_enum(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:model_service.InferenceRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::model_service::InferenceInputData* data_;
  ::model_service::ThresholdParam* param_;
  int32_t model_enum_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_model_2eproto;
};
// -------------------------------------------------------------------

class InferenceInputData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:model_service.InferenceInputData) */ {
 public:
  inline InferenceInputData() : InferenceInputData(nullptr) {}
  ~InferenceInputData() override;
  explicit constexpr InferenceInputData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InferenceInputData(const InferenceInputData& from);
  InferenceInputData(InferenceInputData&& from) noexcept
    : InferenceInputData() {
    *this = ::std::move(from);
  }

  inline InferenceInputData& operator=(const InferenceInputData& from) {
    CopyFrom(from);
    return *this;
  }
  inline InferenceInputData& operator=(InferenceInputData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InferenceInputData& default_instance() {
    return *internal_default_instance();
  }
  static inline const InferenceInputData* internal_default_instance() {
    return reinterpret_cast<const InferenceInputData*>(
               &_InferenceInputData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(InferenceInputData& a, InferenceInputData& b) {
    a.Swap(&b);
  }
  inline void Swap(InferenceInputData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InferenceInputData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InferenceInputData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InferenceInputData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InferenceInputData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const InferenceInputData& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InferenceInputData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "model_service.InferenceInputData";
  }
  protected:
  explicit InferenceInputData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPicDataFieldNumber = 4,
    kWidthFieldNumber = 1,
    kHeightFieldNumber = 2,
    kStrideFieldNumber = 3,
    kUsePhysicAddrFieldNumber = 6,
    kPicSizeFieldNumber = 5,
    kSensorIdFieldNumber = 7,
  };
  // bytes pic_data = 4;
  void clear_pic_data();
  const std::string& pic_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pic_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pic_data();
  PROTOBUF_NODISCARD std::string* release_pic_data();
  void set_allocated_pic_data(std::string* pic_data);
  private:
  const std::string& _internal_pic_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pic_data(const std::string& value);
  std::string* _internal_mutable_pic_data();
  public:

  // int32 width = 1;
  void clear_width();
  int32_t width() const;
  void set_width(int32_t value);
  private:
  int32_t _internal_width() const;
  void _internal_set_width(int32_t value);
  public:

  // int32 height = 2;
  void clear_height();
  int32_t height() const;
  void set_height(int32_t value);
  private:
  int32_t _internal_height() const;
  void _internal_set_height(int32_t value);
  public:

  // int32 stride = 3;
  void clear_stride();
  int32_t stride() const;
  void set_stride(int32_t value);
  private:
  int32_t _internal_stride() const;
  void _internal_set_stride(int32_t value);
  public:

  // bool use_physic_addr = 6;
  void clear_use_physic_addr();
  bool use_physic_addr() const;
  void set_use_physic_addr(bool value);
  private:
  bool _internal_use_physic_addr() const;
  void _internal_set_use_physic_addr(bool value);
  public:

  // int64 pic_size = 5;
  void clear_pic_size();
  int64_t pic_size() const;
  void set_pic_size(int64_t value);
  private:
  int64_t _internal_pic_size() const;
  void _internal_set_pic_size(int64_t value);
  public:

  // int32 sensor_id = 7;
  void clear_sensor_id();
  int32_t sensor_id() const;
  void set_sensor_id(int32_t value);
  private:
  int32_t _internal_sensor_id() const;
  void _internal_set_sensor_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:model_service.InferenceInputData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pic_data_;
  int32_t width_;
  int32_t height_;
  int32_t stride_;
  bool use_physic_addr_;
  int64_t pic_size_;
  int32_t sensor_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_model_2eproto;
};
// -------------------------------------------------------------------

class ThresholdParam final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:model_service.ThresholdParam) */ {
 public:
  inline ThresholdParam() : ThresholdParam(nullptr) {}
  ~ThresholdParam() override;
  explicit constexpr ThresholdParam(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ThresholdParam(const ThresholdParam& from);
  ThresholdParam(ThresholdParam&& from) noexcept
    : ThresholdParam() {
    *this = ::std::move(from);
  }

  inline ThresholdParam& operator=(const ThresholdParam& from) {
    CopyFrom(from);
    return *this;
  }
  inline ThresholdParam& operator=(ThresholdParam&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ThresholdParam& default_instance() {
    return *internal_default_instance();
  }
  static inline const ThresholdParam* internal_default_instance() {
    return reinterpret_cast<const ThresholdParam*>(
               &_ThresholdParam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ThresholdParam& a, ThresholdParam& b) {
    a.Swap(&b);
  }
  inline void Swap(ThresholdParam* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ThresholdParam* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ThresholdParam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ThresholdParam>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ThresholdParam& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ThresholdParam& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ThresholdParam* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "model_service.ThresholdParam";
  }
  protected:
  explicit ThresholdParam(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kThresholdFieldNumber = 2,
    kNmsThresholdFieldNumber = 3,
  };
  // float threshold = 2;
  void clear_threshold();
  float threshold() const;
  void set_threshold(float value);
  private:
  float _internal_threshold() const;
  void _internal_set_threshold(float value);
  public:

  // float nms_threshold = 3;
  void clear_nms_threshold();
  float nms_threshold() const;
  void set_nms_threshold(float value);
  private:
  float _internal_nms_threshold() const;
  void _internal_set_nms_threshold(float value);
  public:

  // @@protoc_insertion_point(class_scope:model_service.ThresholdParam)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float threshold_;
  float nms_threshold_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_model_2eproto;
};
// -------------------------------------------------------------------

class InitModelRequest_ModelParamEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<InitModelRequest_ModelParamEntry_DoNotUse, 
    int32_t, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<InitModelRequest_ModelParamEntry_DoNotUse, 
    int32_t, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  InitModelRequest_ModelParamEntry_DoNotUse();
  explicit constexpr InitModelRequest_ModelParamEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit InitModelRequest_ModelParamEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const InitModelRequest_ModelParamEntry_DoNotUse& other);
  static const InitModelRequest_ModelParamEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const InitModelRequest_ModelParamEntry_DoNotUse*>(&_InitModelRequest_ModelParamEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "model_service.InitModelRequest.ModelParamEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class InitModelRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:model_service.InitModelRequest) */ {
 public:
  inline InitModelRequest() : InitModelRequest(nullptr) {}
  ~InitModelRequest() override;
  explicit constexpr InitModelRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InitModelRequest(const InitModelRequest& from);
  InitModelRequest(InitModelRequest&& from) noexcept
    : InitModelRequest() {
    *this = ::std::move(from);
  }

  inline InitModelRequest& operator=(const InitModelRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline InitModelRequest& operator=(InitModelRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InitModelRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const InitModelRequest* internal_default_instance() {
    return reinterpret_cast<const InitModelRequest*>(
               &_InitModelRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(InitModelRequest& a, InitModelRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(InitModelRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InitModelRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InitModelRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InitModelRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InitModelRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const InitModelRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InitModelRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "model_service.InitModelRequest";
  }
  protected:
  explicit InitModelRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kModelParamFieldNumber = 2,
    kModelEnumFieldNumber = 1,
  };
  // map<int32, string> model_param = 2;
  int model_param_size() const;
  private:
  int _internal_model_param_size() const;
  public:
  void clear_model_param();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, std::string >&
      _internal_model_param() const;
  ::PROTOBUF_NAMESPACE_ID::Map< int32_t, std::string >*
      _internal_mutable_model_param();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, std::string >&
      model_param() const;
  ::PROTOBUF_NAMESPACE_ID::Map< int32_t, std::string >*
      mutable_model_param();

  // int32 model_enum = 1;
  void clear_model_enum();
  int32_t model_enum() const;
  void set_model_enum(int32_t value);
  private:
  int32_t _internal_model_enum() const;
  void _internal_set_model_enum(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:model_service.InitModelRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      InitModelRequest_ModelParamEntry_DoNotUse,
      int32_t, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> model_param_;
  int32_t model_enum_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_model_2eproto;
};
// -------------------------------------------------------------------

class ReleaseModelRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:model_service.ReleaseModelRequest) */ {
 public:
  inline ReleaseModelRequest() : ReleaseModelRequest(nullptr) {}
  ~ReleaseModelRequest() override;
  explicit constexpr ReleaseModelRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReleaseModelRequest(const ReleaseModelRequest& from);
  ReleaseModelRequest(ReleaseModelRequest&& from) noexcept
    : ReleaseModelRequest() {
    *this = ::std::move(from);
  }

  inline ReleaseModelRequest& operator=(const ReleaseModelRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReleaseModelRequest& operator=(ReleaseModelRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReleaseModelRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReleaseModelRequest* internal_default_instance() {
    return reinterpret_cast<const ReleaseModelRequest*>(
               &_ReleaseModelRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ReleaseModelRequest& a, ReleaseModelRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ReleaseModelRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReleaseModelRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReleaseModelRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReleaseModelRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReleaseModelRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ReleaseModelRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReleaseModelRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "model_service.ReleaseModelRequest";
  }
  protected:
  explicit ReleaseModelRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModelEnumFieldNumber = 1,
  };
  // int32 model_enum = 1;
  void clear_model_enum();
  int32_t model_enum() const;
  void set_model_enum(int32_t value);
  private:
  int32_t _internal_model_enum() const;
  void _internal_set_model_enum(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:model_service.ReleaseModelRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t model_enum_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_model_2eproto;
};
// -------------------------------------------------------------------

class ModelReply final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:model_service.ModelReply) */ {
 public:
  inline ModelReply() : ModelReply(nullptr) {}
  ~ModelReply() override;
  explicit constexpr ModelReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ModelReply(const ModelReply& from);
  ModelReply(ModelReply&& from) noexcept
    : ModelReply() {
    *this = ::std::move(from);
  }

  inline ModelReply& operator=(const ModelReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModelReply& operator=(ModelReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ModelReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const ModelReply* internal_default_instance() {
    return reinterpret_cast<const ModelReply*>(
               &_ModelReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ModelReply& a, ModelReply& b) {
    a.Swap(&b);
  }
  inline void Swap(ModelReply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModelReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ModelReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ModelReply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ModelReply& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ModelReply& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModelReply* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "model_service.ModelReply";
  }
  protected:
  explicit ModelReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrMessageFieldNumber = 2,
    kRetCodeFieldNumber = 1,
  };
  // string err_message = 2;
  void clear_err_message();
  const std::string& err_message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_err_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_err_message();
  PROTOBUF_NODISCARD std::string* release_err_message();
  void set_allocated_err_message(std::string* err_message);
  private:
  const std::string& _internal_err_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_err_message(const std::string& value);
  std::string* _internal_mutable_err_message();
  public:

  // int32 ret_code = 1;
  void clear_ret_code();
  int32_t ret_code() const;
  void set_ret_code(int32_t value);
  private:
  int32_t _internal_ret_code() const;
  void _internal_set_ret_code(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:model_service.ModelReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr err_message_;
  int32_t ret_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_model_2eproto;
};
// -------------------------------------------------------------------

class BBox final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:model_service.BBox) */ {
 public:
  inline BBox() : BBox(nullptr) {}
  ~BBox() override;
  explicit constexpr BBox(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BBox(const BBox& from);
  BBox(BBox&& from) noexcept
    : BBox() {
    *this = ::std::move(from);
  }

  inline BBox& operator=(const BBox& from) {
    CopyFrom(from);
    return *this;
  }
  inline BBox& operator=(BBox&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BBox& default_instance() {
    return *internal_default_instance();
  }
  static inline const BBox* internal_default_instance() {
    return reinterpret_cast<const BBox*>(
               &_BBox_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(BBox& a, BBox& b) {
    a.Swap(&b);
  }
  inline void Swap(BBox* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BBox* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BBox* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BBox>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BBox& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BBox& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BBox* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "model_service.BBox";
  }
  protected:
  explicit BBox(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjnameFieldNumber = 12,
    kDescFieldNumber = 13,
    kX0FieldNumber = 1,
    kY0FieldNumber = 2,
    kX1FieldNumber = 3,
    kY1FieldNumber = 4,
    kXFieldNumber = 5,
    kYFieldNumber = 6,
    kWFieldNumber = 7,
    kHFieldNumber = 8,
    kObjectnessFieldNumber = 9,
    kConfidenceFieldNumber = 10,
    kQualityFieldNumber = 11,
  };
  // string objname = 12;
  void clear_objname();
  const std::string& objname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_objname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_objname();
  PROTOBUF_NODISCARD std::string* release_objname();
  void set_allocated_objname(std::string* objname);
  private:
  const std::string& _internal_objname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_objname(const std::string& value);
  std::string* _internal_mutable_objname();
  public:

  // string desc = 13;
  void clear_desc();
  const std::string& desc() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_desc(ArgT0&& arg0, ArgT... args);
  std::string* mutable_desc();
  PROTOBUF_NODISCARD std::string* release_desc();
  void set_allocated_desc(std::string* desc);
  private:
  const std::string& _internal_desc() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_desc(const std::string& value);
  std::string* _internal_mutable_desc();
  public:

  // float x0 = 1;
  void clear_x0();
  float x0() const;
  void set_x0(float value);
  private:
  float _internal_x0() const;
  void _internal_set_x0(float value);
  public:

  // float y0 = 2;
  void clear_y0();
  float y0() const;
  void set_y0(float value);
  private:
  float _internal_y0() const;
  void _internal_set_y0(float value);
  public:

  // float x1 = 3;
  void clear_x1();
  float x1() const;
  void set_x1(float value);
  private:
  float _internal_x1() const;
  void _internal_set_x1(float value);
  public:

  // float y1 = 4;
  void clear_y1();
  float y1() const;
  void set_y1(float value);
  private:
  float _internal_y1() const;
  void _internal_set_y1(float value);
  public:

  // float x = 5;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 6;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float w = 7;
  void clear_w();
  float w() const;
  void set_w(float value);
  private:
  float _internal_w() const;
  void _internal_set_w(float value);
  public:

  // float h = 8;
  void clear_h();
  float h() const;
  void set_h(float value);
  private:
  float _internal_h() const;
  void _internal_set_h(float value);
  public:

  // float objectness = 9;
  void clear_objectness();
  float objectness() const;
  void set_objectness(float value);
  private:
  float _internal_objectness() const;
  void _internal_set_objectness(float value);
  public:

  // float confidence = 10;
  void clear_confidence();
  float confidence() const;
  void set_confidence(float value);
  private:
  float _internal_confidence() const;
  void _internal_set_confidence(float value);
  public:

  // float quality = 11;
  void clear_quality();
  float quality() const;
  void set_quality(float value);
  private:
  float _internal_quality() const;
  void _internal_set_quality(float value);
  public:

  // @@protoc_insertion_point(class_scope:model_service.BBox)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr objname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr desc_;
  float x0_;
  float y0_;
  float x1_;
  float y1_;
  float x_;
  float y_;
  float w_;
  float h_;
  float objectness_;
  float confidence_;
  float quality_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_model_2eproto;
};
// -------------------------------------------------------------------

class InferenceReply final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:model_service.InferenceReply) */ {
 public:
  inline InferenceReply() : InferenceReply(nullptr) {}
  ~InferenceReply() override;
  explicit constexpr InferenceReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InferenceReply(const InferenceReply& from);
  InferenceReply(InferenceReply&& from) noexcept
    : InferenceReply() {
    *this = ::std::move(from);
  }

  inline InferenceReply& operator=(const InferenceReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline InferenceReply& operator=(InferenceReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InferenceReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const InferenceReply* internal_default_instance() {
    return reinterpret_cast<const InferenceReply*>(
               &_InferenceReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(InferenceReply& a, InferenceReply& b) {
    a.Swap(&b);
  }
  inline void Swap(InferenceReply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InferenceReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InferenceReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InferenceReply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InferenceReply& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const InferenceReply& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InferenceReply* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "model_service.InferenceReply";
  }
  protected:
  explicit InferenceReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBboxesFieldNumber = 1,
    kErrMessageFieldNumber = 3,
    kRetCodeFieldNumber = 2,
  };
  // repeated .model_service.BBox bboxes = 1;
  int bboxes_size() const;
  private:
  int _internal_bboxes_size() const;
  public:
  void clear_bboxes();
  ::model_service::BBox* mutable_bboxes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::model_service::BBox >*
      mutable_bboxes();
  private:
  const ::model_service::BBox& _internal_bboxes(int index) const;
  ::model_service::BBox* _internal_add_bboxes();
  public:
  const ::model_service::BBox& bboxes(int index) const;
  ::model_service::BBox* add_bboxes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::model_service::BBox >&
      bboxes() const;

  // string err_message = 3;
  void clear_err_message();
  const std::string& err_message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_err_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_err_message();
  PROTOBUF_NODISCARD std::string* release_err_message();
  void set_allocated_err_message(std::string* err_message);
  private:
  const std::string& _internal_err_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_err_message(const std::string& value);
  std::string* _internal_mutable_err_message();
  public:

  // int32 ret_code = 2;
  void clear_ret_code();
  int32_t ret_code() const;
  void set_ret_code(int32_t value);
  private:
  int32_t _internal_ret_code() const;
  void _internal_set_ret_code(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:model_service.InferenceReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::model_service::BBox > bboxes_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr err_message_;
  int32_t ret_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_model_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// InferenceRequest

// int32 model_enum = 1;
inline void InferenceRequest::clear_model_enum() {
  model_enum_ = 0;
}
inline int32_t InferenceRequest::_internal_model_enum() const {
  return model_enum_;
}
inline int32_t InferenceRequest::model_enum() const {
  // @@protoc_insertion_point(field_get:model_service.InferenceRequest.model_enum)
  return _internal_model_enum();
}
inline void InferenceRequest::_internal_set_model_enum(int32_t value) {
  
  model_enum_ = value;
}
inline void InferenceRequest::set_model_enum(int32_t value) {
  _internal_set_model_enum(value);
  // @@protoc_insertion_point(field_set:model_service.InferenceRequest.model_enum)
}

// .model_service.InferenceInputData data = 2;
inline bool InferenceRequest::_internal_has_data() const {
  return this != internal_default_instance() && data_ != nullptr;
}
inline bool InferenceRequest::has_data() const {
  return _internal_has_data();
}
inline void InferenceRequest::clear_data() {
  if (GetArenaForAllocation() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
}
inline const ::model_service::InferenceInputData& InferenceRequest::_internal_data() const {
  const ::model_service::InferenceInputData* p = data_;
  return p != nullptr ? *p : reinterpret_cast<const ::model_service::InferenceInputData&>(
      ::model_service::_InferenceInputData_default_instance_);
}
inline const ::model_service::InferenceInputData& InferenceRequest::data() const {
  // @@protoc_insertion_point(field_get:model_service.InferenceRequest.data)
  return _internal_data();
}
inline void InferenceRequest::unsafe_arena_set_allocated_data(
    ::model_service::InferenceInputData* data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:model_service.InferenceRequest.data)
}
inline ::model_service::InferenceInputData* InferenceRequest::release_data() {
  
  ::model_service::InferenceInputData* temp = data_;
  data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::model_service::InferenceInputData* InferenceRequest::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:model_service.InferenceRequest.data)
  
  ::model_service::InferenceInputData* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::model_service::InferenceInputData* InferenceRequest::_internal_mutable_data() {
  
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::model_service::InferenceInputData>(GetArenaForAllocation());
    data_ = p;
  }
  return data_;
}
inline ::model_service::InferenceInputData* InferenceRequest::mutable_data() {
  ::model_service::InferenceInputData* _msg = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:model_service.InferenceRequest.data)
  return _msg;
}
inline void InferenceRequest::set_allocated_data(::model_service::InferenceInputData* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete data_;
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::model_service::InferenceInputData>::GetOwningArena(data);
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:model_service.InferenceRequest.data)
}

// .model_service.ThresholdParam param = 3;
inline bool InferenceRequest::_internal_has_param() const {
  return this != internal_default_instance() && param_ != nullptr;
}
inline bool InferenceRequest::has_param() const {
  return _internal_has_param();
}
inline void InferenceRequest::clear_param() {
  if (GetArenaForAllocation() == nullptr && param_ != nullptr) {
    delete param_;
  }
  param_ = nullptr;
}
inline const ::model_service::ThresholdParam& InferenceRequest::_internal_param() const {
  const ::model_service::ThresholdParam* p = param_;
  return p != nullptr ? *p : reinterpret_cast<const ::model_service::ThresholdParam&>(
      ::model_service::_ThresholdParam_default_instance_);
}
inline const ::model_service::ThresholdParam& InferenceRequest::param() const {
  // @@protoc_insertion_point(field_get:model_service.InferenceRequest.param)
  return _internal_param();
}
inline void InferenceRequest::unsafe_arena_set_allocated_param(
    ::model_service::ThresholdParam* param) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(param_);
  }
  param_ = param;
  if (param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:model_service.InferenceRequest.param)
}
inline ::model_service::ThresholdParam* InferenceRequest::release_param() {
  
  ::model_service::ThresholdParam* temp = param_;
  param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::model_service::ThresholdParam* InferenceRequest::unsafe_arena_release_param() {
  // @@protoc_insertion_point(field_release:model_service.InferenceRequest.param)
  
  ::model_service::ThresholdParam* temp = param_;
  param_ = nullptr;
  return temp;
}
inline ::model_service::ThresholdParam* InferenceRequest::_internal_mutable_param() {
  
  if (param_ == nullptr) {
    auto* p = CreateMaybeMessage<::model_service::ThresholdParam>(GetArenaForAllocation());
    param_ = p;
  }
  return param_;
}
inline ::model_service::ThresholdParam* InferenceRequest::mutable_param() {
  ::model_service::ThresholdParam* _msg = _internal_mutable_param();
  // @@protoc_insertion_point(field_mutable:model_service.InferenceRequest.param)
  return _msg;
}
inline void InferenceRequest::set_allocated_param(::model_service::ThresholdParam* param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete param_;
  }
  if (param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::model_service::ThresholdParam>::GetOwningArena(param);
    if (message_arena != submessage_arena) {
      param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, param, submessage_arena);
    }
    
  } else {
    
  }
  param_ = param;
  // @@protoc_insertion_point(field_set_allocated:model_service.InferenceRequest.param)
}

// -------------------------------------------------------------------

// InferenceInputData

// int32 width = 1;
inline void InferenceInputData::clear_width() {
  width_ = 0;
}
inline int32_t InferenceInputData::_internal_width() const {
  return width_;
}
inline int32_t InferenceInputData::width() const {
  // @@protoc_insertion_point(field_get:model_service.InferenceInputData.width)
  return _internal_width();
}
inline void InferenceInputData::_internal_set_width(int32_t value) {
  
  width_ = value;
}
inline void InferenceInputData::set_width(int32_t value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:model_service.InferenceInputData.width)
}

// int32 height = 2;
inline void InferenceInputData::clear_height() {
  height_ = 0;
}
inline int32_t InferenceInputData::_internal_height() const {
  return height_;
}
inline int32_t InferenceInputData::height() const {
  // @@protoc_insertion_point(field_get:model_service.InferenceInputData.height)
  return _internal_height();
}
inline void InferenceInputData::_internal_set_height(int32_t value) {
  
  height_ = value;
}
inline void InferenceInputData::set_height(int32_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:model_service.InferenceInputData.height)
}

// int32 stride = 3;
inline void InferenceInputData::clear_stride() {
  stride_ = 0;
}
inline int32_t InferenceInputData::_internal_stride() const {
  return stride_;
}
inline int32_t InferenceInputData::stride() const {
  // @@protoc_insertion_point(field_get:model_service.InferenceInputData.stride)
  return _internal_stride();
}
inline void InferenceInputData::_internal_set_stride(int32_t value) {
  
  stride_ = value;
}
inline void InferenceInputData::set_stride(int32_t value) {
  _internal_set_stride(value);
  // @@protoc_insertion_point(field_set:model_service.InferenceInputData.stride)
}

// bytes pic_data = 4;
inline void InferenceInputData::clear_pic_data() {
  pic_data_.ClearToEmpty();
}
inline const std::string& InferenceInputData::pic_data() const {
  // @@protoc_insertion_point(field_get:model_service.InferenceInputData.pic_data)
  return _internal_pic_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InferenceInputData::set_pic_data(ArgT0&& arg0, ArgT... args) {
 
 pic_data_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:model_service.InferenceInputData.pic_data)
}
inline std::string* InferenceInputData::mutable_pic_data() {
  std::string* _s = _internal_mutable_pic_data();
  // @@protoc_insertion_point(field_mutable:model_service.InferenceInputData.pic_data)
  return _s;
}
inline const std::string& InferenceInputData::_internal_pic_data() const {
  return pic_data_.Get();
}
inline void InferenceInputData::_internal_set_pic_data(const std::string& value) {
  
  pic_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* InferenceInputData::_internal_mutable_pic_data() {
  
  return pic_data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* InferenceInputData::release_pic_data() {
  // @@protoc_insertion_point(field_release:model_service.InferenceInputData.pic_data)
  return pic_data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void InferenceInputData::set_allocated_pic_data(std::string* pic_data) {
  if (pic_data != nullptr) {
    
  } else {
    
  }
  pic_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pic_data,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (pic_data_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    pic_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:model_service.InferenceInputData.pic_data)
}

// int64 pic_size = 5;
inline void InferenceInputData::clear_pic_size() {
  pic_size_ = int64_t{0};
}
inline int64_t InferenceInputData::_internal_pic_size() const {
  return pic_size_;
}
inline int64_t InferenceInputData::pic_size() const {
  // @@protoc_insertion_point(field_get:model_service.InferenceInputData.pic_size)
  return _internal_pic_size();
}
inline void InferenceInputData::_internal_set_pic_size(int64_t value) {
  
  pic_size_ = value;
}
inline void InferenceInputData::set_pic_size(int64_t value) {
  _internal_set_pic_size(value);
  // @@protoc_insertion_point(field_set:model_service.InferenceInputData.pic_size)
}

// bool use_physic_addr = 6;
inline void InferenceInputData::clear_use_physic_addr() {
  use_physic_addr_ = false;
}
inline bool InferenceInputData::_internal_use_physic_addr() const {
  return use_physic_addr_;
}
inline bool InferenceInputData::use_physic_addr() const {
  // @@protoc_insertion_point(field_get:model_service.InferenceInputData.use_physic_addr)
  return _internal_use_physic_addr();
}
inline void InferenceInputData::_internal_set_use_physic_addr(bool value) {
  
  use_physic_addr_ = value;
}
inline void InferenceInputData::set_use_physic_addr(bool value) {
  _internal_set_use_physic_addr(value);
  // @@protoc_insertion_point(field_set:model_service.InferenceInputData.use_physic_addr)
}

// int32 sensor_id = 7;
inline void InferenceInputData::clear_sensor_id() {
  sensor_id_ = 0;
}
inline int32_t InferenceInputData::_internal_sensor_id() const {
  return sensor_id_;
}
inline int32_t InferenceInputData::sensor_id() const {
  // @@protoc_insertion_point(field_get:model_service.InferenceInputData.sensor_id)
  return _internal_sensor_id();
}
inline void InferenceInputData::_internal_set_sensor_id(int32_t value) {
  
  sensor_id_ = value;
}
inline void InferenceInputData::set_sensor_id(int32_t value) {
  _internal_set_sensor_id(value);
  // @@protoc_insertion_point(field_set:model_service.InferenceInputData.sensor_id)
}

// -------------------------------------------------------------------

// ThresholdParam

// float threshold = 2;
inline void ThresholdParam::clear_threshold() {
  threshold_ = 0;
}
inline float ThresholdParam::_internal_threshold() const {
  return threshold_;
}
inline float ThresholdParam::threshold() const {
  // @@protoc_insertion_point(field_get:model_service.ThresholdParam.threshold)
  return _internal_threshold();
}
inline void ThresholdParam::_internal_set_threshold(float value) {
  
  threshold_ = value;
}
inline void ThresholdParam::set_threshold(float value) {
  _internal_set_threshold(value);
  // @@protoc_insertion_point(field_set:model_service.ThresholdParam.threshold)
}

// float nms_threshold = 3;
inline void ThresholdParam::clear_nms_threshold() {
  nms_threshold_ = 0;
}
inline float ThresholdParam::_internal_nms_threshold() const {
  return nms_threshold_;
}
inline float ThresholdParam::nms_threshold() const {
  // @@protoc_insertion_point(field_get:model_service.ThresholdParam.nms_threshold)
  return _internal_nms_threshold();
}
inline void ThresholdParam::_internal_set_nms_threshold(float value) {
  
  nms_threshold_ = value;
}
inline void ThresholdParam::set_nms_threshold(float value) {
  _internal_set_nms_threshold(value);
  // @@protoc_insertion_point(field_set:model_service.ThresholdParam.nms_threshold)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// InitModelRequest

// int32 model_enum = 1;
inline void InitModelRequest::clear_model_enum() {
  model_enum_ = 0;
}
inline int32_t InitModelRequest::_internal_model_enum() const {
  return model_enum_;
}
inline int32_t InitModelRequest::model_enum() const {
  // @@protoc_insertion_point(field_get:model_service.InitModelRequest.model_enum)
  return _internal_model_enum();
}
inline void InitModelRequest::_internal_set_model_enum(int32_t value) {
  
  model_enum_ = value;
}
inline void InitModelRequest::set_model_enum(int32_t value) {
  _internal_set_model_enum(value);
  // @@protoc_insertion_point(field_set:model_service.InitModelRequest.model_enum)
}

// map<int32, string> model_param = 2;
inline int InitModelRequest::_internal_model_param_size() const {
  return model_param_.size();
}
inline int InitModelRequest::model_param_size() const {
  return _internal_model_param_size();
}
inline void InitModelRequest::clear_model_param() {
  model_param_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, std::string >&
InitModelRequest::_internal_model_param() const {
  return model_param_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, std::string >&
InitModelRequest::model_param() const {
  // @@protoc_insertion_point(field_map:model_service.InitModelRequest.model_param)
  return _internal_model_param();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< int32_t, std::string >*
InitModelRequest::_internal_mutable_model_param() {
  return model_param_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< int32_t, std::string >*
InitModelRequest::mutable_model_param() {
  // @@protoc_insertion_point(field_mutable_map:model_service.InitModelRequest.model_param)
  return _internal_mutable_model_param();
}

// -------------------------------------------------------------------

// ReleaseModelRequest

// int32 model_enum = 1;
inline void ReleaseModelRequest::clear_model_enum() {
  model_enum_ = 0;
}
inline int32_t ReleaseModelRequest::_internal_model_enum() const {
  return model_enum_;
}
inline int32_t ReleaseModelRequest::model_enum() const {
  // @@protoc_insertion_point(field_get:model_service.ReleaseModelRequest.model_enum)
  return _internal_model_enum();
}
inline void ReleaseModelRequest::_internal_set_model_enum(int32_t value) {
  
  model_enum_ = value;
}
inline void ReleaseModelRequest::set_model_enum(int32_t value) {
  _internal_set_model_enum(value);
  // @@protoc_insertion_point(field_set:model_service.ReleaseModelRequest.model_enum)
}

// -------------------------------------------------------------------

// ModelReply

// int32 ret_code = 1;
inline void ModelReply::clear_ret_code() {
  ret_code_ = 0;
}
inline int32_t ModelReply::_internal_ret_code() const {
  return ret_code_;
}
inline int32_t ModelReply::ret_code() const {
  // @@protoc_insertion_point(field_get:model_service.ModelReply.ret_code)
  return _internal_ret_code();
}
inline void ModelReply::_internal_set_ret_code(int32_t value) {
  
  ret_code_ = value;
}
inline void ModelReply::set_ret_code(int32_t value) {
  _internal_set_ret_code(value);
  // @@protoc_insertion_point(field_set:model_service.ModelReply.ret_code)
}

// string err_message = 2;
inline void ModelReply::clear_err_message() {
  err_message_.ClearToEmpty();
}
inline const std::string& ModelReply::err_message() const {
  // @@protoc_insertion_point(field_get:model_service.ModelReply.err_message)
  return _internal_err_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ModelReply::set_err_message(ArgT0&& arg0, ArgT... args) {
 
 err_message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:model_service.ModelReply.err_message)
}
inline std::string* ModelReply::mutable_err_message() {
  std::string* _s = _internal_mutable_err_message();
  // @@protoc_insertion_point(field_mutable:model_service.ModelReply.err_message)
  return _s;
}
inline const std::string& ModelReply::_internal_err_message() const {
  return err_message_.Get();
}
inline void ModelReply::_internal_set_err_message(const std::string& value) {
  
  err_message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ModelReply::_internal_mutable_err_message() {
  
  return err_message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ModelReply::release_err_message() {
  // @@protoc_insertion_point(field_release:model_service.ModelReply.err_message)
  return err_message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ModelReply::set_allocated_err_message(std::string* err_message) {
  if (err_message != nullptr) {
    
  } else {
    
  }
  err_message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), err_message,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (err_message_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    err_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:model_service.ModelReply.err_message)
}

// -------------------------------------------------------------------

// BBox

// float x0 = 1;
inline void BBox::clear_x0() {
  x0_ = 0;
}
inline float BBox::_internal_x0() const {
  return x0_;
}
inline float BBox::x0() const {
  // @@protoc_insertion_point(field_get:model_service.BBox.x0)
  return _internal_x0();
}
inline void BBox::_internal_set_x0(float value) {
  
  x0_ = value;
}
inline void BBox::set_x0(float value) {
  _internal_set_x0(value);
  // @@protoc_insertion_point(field_set:model_service.BBox.x0)
}

// float y0 = 2;
inline void BBox::clear_y0() {
  y0_ = 0;
}
inline float BBox::_internal_y0() const {
  return y0_;
}
inline float BBox::y0() const {
  // @@protoc_insertion_point(field_get:model_service.BBox.y0)
  return _internal_y0();
}
inline void BBox::_internal_set_y0(float value) {
  
  y0_ = value;
}
inline void BBox::set_y0(float value) {
  _internal_set_y0(value);
  // @@protoc_insertion_point(field_set:model_service.BBox.y0)
}

// float x1 = 3;
inline void BBox::clear_x1() {
  x1_ = 0;
}
inline float BBox::_internal_x1() const {
  return x1_;
}
inline float BBox::x1() const {
  // @@protoc_insertion_point(field_get:model_service.BBox.x1)
  return _internal_x1();
}
inline void BBox::_internal_set_x1(float value) {
  
  x1_ = value;
}
inline void BBox::set_x1(float value) {
  _internal_set_x1(value);
  // @@protoc_insertion_point(field_set:model_service.BBox.x1)
}

// float y1 = 4;
inline void BBox::clear_y1() {
  y1_ = 0;
}
inline float BBox::_internal_y1() const {
  return y1_;
}
inline float BBox::y1() const {
  // @@protoc_insertion_point(field_get:model_service.BBox.y1)
  return _internal_y1();
}
inline void BBox::_internal_set_y1(float value) {
  
  y1_ = value;
}
inline void BBox::set_y1(float value) {
  _internal_set_y1(value);
  // @@protoc_insertion_point(field_set:model_service.BBox.y1)
}

// float x = 5;
inline void BBox::clear_x() {
  x_ = 0;
}
inline float BBox::_internal_x() const {
  return x_;
}
inline float BBox::x() const {
  // @@protoc_insertion_point(field_get:model_service.BBox.x)
  return _internal_x();
}
inline void BBox::_internal_set_x(float value) {
  
  x_ = value;
}
inline void BBox::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:model_service.BBox.x)
}

// float y = 6;
inline void BBox::clear_y() {
  y_ = 0;
}
inline float BBox::_internal_y() const {
  return y_;
}
inline float BBox::y() const {
  // @@protoc_insertion_point(field_get:model_service.BBox.y)
  return _internal_y();
}
inline void BBox::_internal_set_y(float value) {
  
  y_ = value;
}
inline void BBox::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:model_service.BBox.y)
}

// float w = 7;
inline void BBox::clear_w() {
  w_ = 0;
}
inline float BBox::_internal_w() const {
  return w_;
}
inline float BBox::w() const {
  // @@protoc_insertion_point(field_get:model_service.BBox.w)
  return _internal_w();
}
inline void BBox::_internal_set_w(float value) {
  
  w_ = value;
}
inline void BBox::set_w(float value) {
  _internal_set_w(value);
  // @@protoc_insertion_point(field_set:model_service.BBox.w)
}

// float h = 8;
inline void BBox::clear_h() {
  h_ = 0;
}
inline float BBox::_internal_h() const {
  return h_;
}
inline float BBox::h() const {
  // @@protoc_insertion_point(field_get:model_service.BBox.h)
  return _internal_h();
}
inline void BBox::_internal_set_h(float value) {
  
  h_ = value;
}
inline void BBox::set_h(float value) {
  _internal_set_h(value);
  // @@protoc_insertion_point(field_set:model_service.BBox.h)
}

// float objectness = 9;
inline void BBox::clear_objectness() {
  objectness_ = 0;
}
inline float BBox::_internal_objectness() const {
  return objectness_;
}
inline float BBox::objectness() const {
  // @@protoc_insertion_point(field_get:model_service.BBox.objectness)
  return _internal_objectness();
}
inline void BBox::_internal_set_objectness(float value) {
  
  objectness_ = value;
}
inline void BBox::set_objectness(float value) {
  _internal_set_objectness(value);
  // @@protoc_insertion_point(field_set:model_service.BBox.objectness)
}

// float confidence = 10;
inline void BBox::clear_confidence() {
  confidence_ = 0;
}
inline float BBox::_internal_confidence() const {
  return confidence_;
}
inline float BBox::confidence() const {
  // @@protoc_insertion_point(field_get:model_service.BBox.confidence)
  return _internal_confidence();
}
inline void BBox::_internal_set_confidence(float value) {
  
  confidence_ = value;
}
inline void BBox::set_confidence(float value) {
  _internal_set_confidence(value);
  // @@protoc_insertion_point(field_set:model_service.BBox.confidence)
}

// float quality = 11;
inline void BBox::clear_quality() {
  quality_ = 0;
}
inline float BBox::_internal_quality() const {
  return quality_;
}
inline float BBox::quality() const {
  // @@protoc_insertion_point(field_get:model_service.BBox.quality)
  return _internal_quality();
}
inline void BBox::_internal_set_quality(float value) {
  
  quality_ = value;
}
inline void BBox::set_quality(float value) {
  _internal_set_quality(value);
  // @@protoc_insertion_point(field_set:model_service.BBox.quality)
}

// string objname = 12;
inline void BBox::clear_objname() {
  objname_.ClearToEmpty();
}
inline const std::string& BBox::objname() const {
  // @@protoc_insertion_point(field_get:model_service.BBox.objname)
  return _internal_objname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BBox::set_objname(ArgT0&& arg0, ArgT... args) {
 
 objname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:model_service.BBox.objname)
}
inline std::string* BBox::mutable_objname() {
  std::string* _s = _internal_mutable_objname();
  // @@protoc_insertion_point(field_mutable:model_service.BBox.objname)
  return _s;
}
inline const std::string& BBox::_internal_objname() const {
  return objname_.Get();
}
inline void BBox::_internal_set_objname(const std::string& value) {
  
  objname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* BBox::_internal_mutable_objname() {
  
  return objname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* BBox::release_objname() {
  // @@protoc_insertion_point(field_release:model_service.BBox.objname)
  return objname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void BBox::set_allocated_objname(std::string* objname) {
  if (objname != nullptr) {
    
  } else {
    
  }
  objname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), objname,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (objname_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    objname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:model_service.BBox.objname)
}

// string desc = 13;
inline void BBox::clear_desc() {
  desc_.ClearToEmpty();
}
inline const std::string& BBox::desc() const {
  // @@protoc_insertion_point(field_get:model_service.BBox.desc)
  return _internal_desc();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BBox::set_desc(ArgT0&& arg0, ArgT... args) {
 
 desc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:model_service.BBox.desc)
}
inline std::string* BBox::mutable_desc() {
  std::string* _s = _internal_mutable_desc();
  // @@protoc_insertion_point(field_mutable:model_service.BBox.desc)
  return _s;
}
inline const std::string& BBox::_internal_desc() const {
  return desc_.Get();
}
inline void BBox::_internal_set_desc(const std::string& value) {
  
  desc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* BBox::_internal_mutable_desc() {
  
  return desc_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* BBox::release_desc() {
  // @@protoc_insertion_point(field_release:model_service.BBox.desc)
  return desc_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void BBox::set_allocated_desc(std::string* desc) {
  if (desc != nullptr) {
    
  } else {
    
  }
  desc_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), desc,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (desc_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    desc_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:model_service.BBox.desc)
}

// -------------------------------------------------------------------

// InferenceReply

// repeated .model_service.BBox bboxes = 1;
inline int InferenceReply::_internal_bboxes_size() const {
  return bboxes_.size();
}
inline int InferenceReply::bboxes_size() const {
  return _internal_bboxes_size();
}
inline void InferenceReply::clear_bboxes() {
  bboxes_.Clear();
}
inline ::model_service::BBox* InferenceReply::mutable_bboxes(int index) {
  // @@protoc_insertion_point(field_mutable:model_service.InferenceReply.bboxes)
  return bboxes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::model_service::BBox >*
InferenceReply::mutable_bboxes() {
  // @@protoc_insertion_point(field_mutable_list:model_service.InferenceReply.bboxes)
  return &bboxes_;
}
inline const ::model_service::BBox& InferenceReply::_internal_bboxes(int index) const {
  return bboxes_.Get(index);
}
inline const ::model_service::BBox& InferenceReply::bboxes(int index) const {
  // @@protoc_insertion_point(field_get:model_service.InferenceReply.bboxes)
  return _internal_bboxes(index);
}
inline ::model_service::BBox* InferenceReply::_internal_add_bboxes() {
  return bboxes_.Add();
}
inline ::model_service::BBox* InferenceReply::add_bboxes() {
  ::model_service::BBox* _add = _internal_add_bboxes();
  // @@protoc_insertion_point(field_add:model_service.InferenceReply.bboxes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::model_service::BBox >&
InferenceReply::bboxes() const {
  // @@protoc_insertion_point(field_list:model_service.InferenceReply.bboxes)
  return bboxes_;
}

// int32 ret_code = 2;
inline void InferenceReply::clear_ret_code() {
  ret_code_ = 0;
}
inline int32_t InferenceReply::_internal_ret_code() const {
  return ret_code_;
}
inline int32_t InferenceReply::ret_code() const {
  // @@protoc_insertion_point(field_get:model_service.InferenceReply.ret_code)
  return _internal_ret_code();
}
inline void InferenceReply::_internal_set_ret_code(int32_t value) {
  
  ret_code_ = value;
}
inline void InferenceReply::set_ret_code(int32_t value) {
  _internal_set_ret_code(value);
  // @@protoc_insertion_point(field_set:model_service.InferenceReply.ret_code)
}

// string err_message = 3;
inline void InferenceReply::clear_err_message() {
  err_message_.ClearToEmpty();
}
inline const std::string& InferenceReply::err_message() const {
  // @@protoc_insertion_point(field_get:model_service.InferenceReply.err_message)
  return _internal_err_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InferenceReply::set_err_message(ArgT0&& arg0, ArgT... args) {
 
 err_message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:model_service.InferenceReply.err_message)
}
inline std::string* InferenceReply::mutable_err_message() {
  std::string* _s = _internal_mutable_err_message();
  // @@protoc_insertion_point(field_mutable:model_service.InferenceReply.err_message)
  return _s;
}
inline const std::string& InferenceReply::_internal_err_message() const {
  return err_message_.Get();
}
inline void InferenceReply::_internal_set_err_message(const std::string& value) {
  
  err_message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* InferenceReply::_internal_mutable_err_message() {
  
  return err_message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* InferenceReply::release_err_message() {
  // @@protoc_insertion_point(field_release:model_service.InferenceReply.err_message)
  return err_message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void InferenceReply::set_allocated_err_message(std::string* err_message) {
  if (err_message != nullptr) {
    
  } else {
    
  }
  err_message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), err_message,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (err_message_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    err_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:model_service.InferenceReply.err_message)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace model_service

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_model_2eproto
